"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a2, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a2, prop, b[prop]);
      }
    return a2;
  };
  var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/lazysizes/lazysizes.js
  var require_lazysizes = __commonJS({
    "node_modules/lazysizes/lazysizes.js"(exports, module) {
      (function(window2, factory) {
        var lazySizes2 = factory(window2, window2.document, Date);
        window2.lazySizes = lazySizes2;
        if (typeof module == "object" && module.exports) {
          module.exports = lazySizes2;
        }
      })(
        typeof window != "undefined" ? window : {},
        /**
         * import("./types/global")
         * @typedef { import("./types/lazysizes-config").LazySizesConfigPartial } LazySizesConfigPartial
         */
        function l(window2, document2, Date2) {
          "use strict";
          var lazysizes, lazySizesCfg;
          (function() {
            var prop;
            var lazySizesDefaults = {
              lazyClass: "lazyload",
              loadedClass: "lazyloaded",
              loadingClass: "lazyloading",
              preloadClass: "lazypreload",
              errorClass: "lazyerror",
              //strictClass: 'lazystrict',
              autosizesClass: "lazyautosizes",
              fastLoadedClass: "ls-is-cached",
              iframeLoadMode: 0,
              srcAttr: "data-src",
              srcsetAttr: "data-srcset",
              sizesAttr: "data-sizes",
              //preloadAfterLoad: false,
              minSize: 40,
              customMedia: {},
              init: true,
              expFactor: 1.5,
              hFac: 0.8,
              loadMode: 2,
              loadHidden: true,
              ricTimeout: 0,
              throttleDelay: 125
            };
            lazySizesCfg = window2.lazySizesConfig || window2.lazysizesConfig || {};
            for (prop in lazySizesDefaults) {
              if (!(prop in lazySizesCfg)) {
                lazySizesCfg[prop] = lazySizesDefaults[prop];
              }
            }
          })();
          if (!document2 || !document2.getElementsByClassName) {
            return {
              init: function() {
              },
              /**
               * @type { LazySizesConfigPartial }
               */
              cfg: lazySizesCfg,
              /**
               * @type { true }
               */
              noSupport: true
            };
          }
          var docElem = document2.documentElement;
          var supportPicture = window2.HTMLPictureElement;
          var _addEventListener = "addEventListener";
          var _getAttribute = "getAttribute";
          var addEventListener = window2[_addEventListener].bind(window2);
          var setTimeout2 = window2.setTimeout;
          var requestAnimationFrame = window2.requestAnimationFrame || setTimeout2;
          var requestIdleCallback = window2.requestIdleCallback;
          var regPicture = /^picture$/i;
          var loadEvents = ["load", "error", "lazyincluded", "_lazyloaded"];
          var regClassCache = {};
          var forEach = Array.prototype.forEach;
          var hasClass = function(ele, cls) {
            if (!regClassCache[cls]) {
              regClassCache[cls] = new RegExp("(\\s|^)" + cls + "(\\s|$)");
            }
            return regClassCache[cls].test(ele[_getAttribute]("class") || "") && regClassCache[cls];
          };
          var addClass = function(ele, cls) {
            if (!hasClass(ele, cls)) {
              ele.setAttribute("class", (ele[_getAttribute]("class") || "").trim() + " " + cls);
            }
          };
          var removeClass = function(ele, cls) {
            var reg;
            if (reg = hasClass(ele, cls)) {
              ele.setAttribute("class", (ele[_getAttribute]("class") || "").replace(reg, " "));
            }
          };
          var addRemoveLoadEvents = function(dom, fn, add) {
            var action = add ? _addEventListener : "removeEventListener";
            if (add) {
              addRemoveLoadEvents(dom, fn);
            }
            loadEvents.forEach(function(evt) {
              dom[action](evt, fn);
            });
          };
          var triggerEvent = function(elem, name, detail, noBubbles, noCancelable) {
            var event = document2.createEvent("Event");
            if (!detail) {
              detail = {};
            }
            detail.instance = lazysizes;
            event.initEvent(name, !noBubbles, !noCancelable);
            event.detail = detail;
            elem.dispatchEvent(event);
            return event;
          };
          var updatePolyfill = function(el, full) {
            var polyfill;
            if (!supportPicture && (polyfill = window2.picturefill || lazySizesCfg.pf)) {
              if (full && full.src && !el[_getAttribute]("srcset")) {
                el.setAttribute("srcset", full.src);
              }
              polyfill({ reevaluate: true, elements: [el] });
            } else if (full && full.src) {
              el.src = full.src;
            }
          };
          var getCSS = function(elem, style) {
            return (getComputedStyle(elem, null) || {})[style];
          };
          var getWidth = function(elem, parent, width) {
            width = width || elem.offsetWidth;
            while (width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth) {
              width = parent.offsetWidth;
              parent = parent.parentNode;
            }
            return width;
          };
          var rAF = function() {
            var running, waiting;
            var firstFns = [];
            var secondFns = [];
            var fns = firstFns;
            var run = function() {
              var runFns = fns;
              fns = firstFns.length ? secondFns : firstFns;
              running = true;
              waiting = false;
              while (runFns.length) {
                runFns.shift()();
              }
              running = false;
            };
            var rafBatch = function(fn, queue) {
              if (running && !queue) {
                fn.apply(this, arguments);
              } else {
                fns.push(fn);
                if (!waiting) {
                  waiting = true;
                  (document2.hidden ? setTimeout2 : requestAnimationFrame)(run);
                }
              }
            };
            rafBatch._lsFlush = run;
            return rafBatch;
          }();
          var rAFIt = function(fn, simple) {
            return simple ? function() {
              rAF(fn);
            } : function() {
              var that = this;
              var args = arguments;
              rAF(function() {
                fn.apply(that, args);
              });
            };
          };
          var throttle = function(fn) {
            var running;
            var lastTime = 0;
            var gDelay = lazySizesCfg.throttleDelay;
            var rICTimeout = lazySizesCfg.ricTimeout;
            var run = function() {
              running = false;
              lastTime = Date2.now();
              fn();
            };
            var idleCallback = requestIdleCallback && rICTimeout > 49 ? function() {
              requestIdleCallback(run, { timeout: rICTimeout });
              if (rICTimeout !== lazySizesCfg.ricTimeout) {
                rICTimeout = lazySizesCfg.ricTimeout;
              }
            } : rAFIt(function() {
              setTimeout2(run);
            }, true);
            return function(isPriority) {
              var delay;
              if (isPriority = isPriority === true) {
                rICTimeout = 33;
              }
              if (running) {
                return;
              }
              running = true;
              delay = gDelay - (Date2.now() - lastTime);
              if (delay < 0) {
                delay = 0;
              }
              if (isPriority || delay < 9) {
                idleCallback();
              } else {
                setTimeout2(idleCallback, delay);
              }
            };
          };
          var debounce = function(func) {
            var timeout, timestamp;
            var wait = 99;
            var run = function() {
              timeout = null;
              func();
            };
            var later = function() {
              var last = Date2.now() - timestamp;
              if (last < wait) {
                setTimeout2(later, wait - last);
              } else {
                (requestIdleCallback || run)(run);
              }
            };
            return function() {
              timestamp = Date2.now();
              if (!timeout) {
                timeout = setTimeout2(later, wait);
              }
            };
          };
          var loader = function() {
            var preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;
            var eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;
            var regImg = /^img$/i;
            var regIframe = /^iframe$/i;
            var supportScroll = "onscroll" in window2 && !/(gle|ing)bot/.test(navigator.userAgent);
            var shrinkExpand = 0;
            var currentExpand = 0;
            var isLoading = 0;
            var lowRuns = -1;
            var resetPreloading = function(e2) {
              isLoading--;
              if (!e2 || isLoading < 0 || !e2.target) {
                isLoading = 0;
              }
            };
            var isVisible = function(elem) {
              if (isBodyHidden == null) {
                isBodyHidden = getCSS(document2.body, "visibility") == "hidden";
              }
              return isBodyHidden || !(getCSS(elem.parentNode, "visibility") == "hidden" && getCSS(elem, "visibility") == "hidden");
            };
            var isNestedVisible = function(elem, elemExpand) {
              var outerRect;
              var parent = elem;
              var visible = isVisible(elem);
              eLtop -= elemExpand;
              eLbottom += elemExpand;
              eLleft -= elemExpand;
              eLright += elemExpand;
              while (visible && (parent = parent.offsetParent) && parent != document2.body && parent != docElem) {
                visible = (getCSS(parent, "opacity") || 1) > 0;
                if (visible && getCSS(parent, "overflow") != "visible") {
                  outerRect = parent.getBoundingClientRect();
                  visible = eLright > outerRect.left && eLleft < outerRect.right && eLbottom > outerRect.top - 1 && eLtop < outerRect.bottom + 1;
                }
              }
              return visible;
            };
            var checkElements = function() {
              var eLlen, i3, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal, defaultExpand, preloadExpand, hFac;
              var lazyloadElems = lazysizes.elements;
              if ((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)) {
                i3 = 0;
                lowRuns++;
                for (; i3 < eLlen; i3++) {
                  if (!lazyloadElems[i3] || lazyloadElems[i3]._lazyRace) {
                    continue;
                  }
                  if (!supportScroll || lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i3])) {
                    unveilElement(lazyloadElems[i3]);
                    continue;
                  }
                  if (!(elemExpandVal = lazyloadElems[i3][_getAttribute]("data-expand")) || !(elemExpand = elemExpandVal * 1)) {
                    elemExpand = currentExpand;
                  }
                  if (!defaultExpand) {
                    defaultExpand = !lazySizesCfg.expand || lazySizesCfg.expand < 1 ? docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 : lazySizesCfg.expand;
                    lazysizes._defEx = defaultExpand;
                    preloadExpand = defaultExpand * lazySizesCfg.expFactor;
                    hFac = lazySizesCfg.hFac;
                    isBodyHidden = null;
                    if (currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document2.hidden) {
                      currentExpand = preloadExpand;
                      lowRuns = 0;
                    } else if (loadMode > 1 && lowRuns > 1 && isLoading < 6) {
                      currentExpand = defaultExpand;
                    } else {
                      currentExpand = shrinkExpand;
                    }
                  }
                  if (beforeExpandVal !== elemExpand) {
                    eLvW = innerWidth + elemExpand * hFac;
                    elvH = innerHeight + elemExpand;
                    elemNegativeExpand = elemExpand * -1;
                    beforeExpandVal = elemExpand;
                  }
                  rect = lazyloadElems[i3].getBoundingClientRect();
                  if ((eLbottom = rect.bottom) >= elemNegativeExpand && (eLtop = rect.top) <= elvH && (eLright = rect.right) >= elemNegativeExpand * hFac && (eLleft = rect.left) <= eLvW && (eLbottom || eLright || eLleft || eLtop) && (lazySizesCfg.loadHidden || isVisible(lazyloadElems[i3])) && (isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4) || isNestedVisible(lazyloadElems[i3], elemExpand))) {
                    unveilElement(lazyloadElems[i3]);
                    loadedSomething = true;
                    if (isLoading > 9) {
                      break;
                    }
                  } else if (!loadedSomething && isCompleted && !autoLoadElem && isLoading < 4 && lowRuns < 4 && loadMode > 2 && (preloadElems[0] || lazySizesCfg.preloadAfterLoad) && (preloadElems[0] || !elemExpandVal && (eLbottom || eLright || eLleft || eLtop || lazyloadElems[i3][_getAttribute](lazySizesCfg.sizesAttr) != "auto"))) {
                    autoLoadElem = preloadElems[0] || lazyloadElems[i3];
                  }
                }
                if (autoLoadElem && !loadedSomething) {
                  unveilElement(autoLoadElem);
                }
              }
            };
            var throttledCheckElements = throttle(checkElements);
            var switchLoadingClass = function(e2) {
              var elem = e2.target;
              if (elem._lazyCache) {
                delete elem._lazyCache;
                return;
              }
              resetPreloading(e2);
              addClass(elem, lazySizesCfg.loadedClass);
              removeClass(elem, lazySizesCfg.loadingClass);
              addRemoveLoadEvents(elem, rafSwitchLoadingClass);
              triggerEvent(elem, "lazyloaded");
            };
            var rafedSwitchLoadingClass = rAFIt(switchLoadingClass);
            var rafSwitchLoadingClass = function(e2) {
              rafedSwitchLoadingClass({ target: e2.target });
            };
            var changeIframeSrc = function(elem, src) {
              var loadMode2 = elem.getAttribute("data-load-mode") || lazySizesCfg.iframeLoadMode;
              if (loadMode2 == 0) {
                elem.contentWindow.location.replace(src);
              } else if (loadMode2 == 1) {
                elem.src = src;
              }
            };
            var handleSources = function(source) {
              var customMedia;
              var sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);
              if (customMedia = lazySizesCfg.customMedia[source[_getAttribute]("data-media") || source[_getAttribute]("media")]) {
                source.setAttribute("media", customMedia);
              }
              if (sourceSrcset) {
                source.setAttribute("srcset", sourceSrcset);
              }
            };
            var lazyUnveil = rAFIt(function(elem, detail, isAuto, sizes, isImg) {
              var src, srcset, parent, isPicture, event, firesLoad;
              if (!(event = triggerEvent(elem, "lazybeforeunveil", detail)).defaultPrevented) {
                if (sizes) {
                  if (isAuto) {
                    addClass(elem, lazySizesCfg.autosizesClass);
                  } else {
                    elem.setAttribute("sizes", sizes);
                  }
                }
                srcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);
                src = elem[_getAttribute](lazySizesCfg.srcAttr);
                if (isImg) {
                  parent = elem.parentNode;
                  isPicture = parent && regPicture.test(parent.nodeName || "");
                }
                firesLoad = detail.firesLoad || "src" in elem && (srcset || src || isPicture);
                event = { target: elem };
                addClass(elem, lazySizesCfg.loadingClass);
                if (firesLoad) {
                  clearTimeout(resetPreloadingTimer);
                  resetPreloadingTimer = setTimeout2(resetPreloading, 2500);
                  addRemoveLoadEvents(elem, rafSwitchLoadingClass, true);
                }
                if (isPicture) {
                  forEach.call(parent.getElementsByTagName("source"), handleSources);
                }
                if (srcset) {
                  elem.setAttribute("srcset", srcset);
                } else if (src && !isPicture) {
                  if (regIframe.test(elem.nodeName)) {
                    changeIframeSrc(elem, src);
                  } else {
                    elem.src = src;
                  }
                }
                if (isImg && (srcset || isPicture)) {
                  updatePolyfill(elem, { src });
                }
              }
              if (elem._lazyRace) {
                delete elem._lazyRace;
              }
              removeClass(elem, lazySizesCfg.lazyClass);
              rAF(function() {
                var isLoaded = elem.complete && elem.naturalWidth > 1;
                if (!firesLoad || isLoaded) {
                  if (isLoaded) {
                    addClass(elem, lazySizesCfg.fastLoadedClass);
                  }
                  switchLoadingClass(event);
                  elem._lazyCache = true;
                  setTimeout2(function() {
                    if ("_lazyCache" in elem) {
                      delete elem._lazyCache;
                    }
                  }, 9);
                }
                if (elem.loading == "lazy") {
                  isLoading--;
                }
              }, true);
            });
            var unveilElement = function(elem) {
              if (elem._lazyRace) {
                return;
              }
              var detail;
              var isImg = regImg.test(elem.nodeName);
              var sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]("sizes"));
              var isAuto = sizes == "auto";
              if ((isAuto || !isCompleted) && isImg && (elem[_getAttribute]("src") || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)) {
                return;
              }
              detail = triggerEvent(elem, "lazyunveilread").detail;
              if (isAuto) {
                autoSizer.updateElem(elem, true, elem.offsetWidth);
              }
              elem._lazyRace = true;
              isLoading++;
              lazyUnveil(elem, detail, isAuto, sizes, isImg);
            };
            var afterScroll = debounce(function() {
              lazySizesCfg.loadMode = 3;
              throttledCheckElements();
            });
            var altLoadmodeScrollListner = function() {
              if (lazySizesCfg.loadMode == 3) {
                lazySizesCfg.loadMode = 2;
              }
              afterScroll();
            };
            var onload = function() {
              if (isCompleted) {
                return;
              }
              if (Date2.now() - started < 999) {
                setTimeout2(onload, 999);
                return;
              }
              isCompleted = true;
              lazySizesCfg.loadMode = 3;
              throttledCheckElements();
              addEventListener("scroll", altLoadmodeScrollListner, true);
            };
            return {
              _: function() {
                started = Date2.now();
                lazysizes.elements = document2.getElementsByClassName(lazySizesCfg.lazyClass);
                preloadElems = document2.getElementsByClassName(lazySizesCfg.lazyClass + " " + lazySizesCfg.preloadClass);
                addEventListener("scroll", throttledCheckElements, true);
                addEventListener("resize", throttledCheckElements, true);
                addEventListener("pageshow", function(e2) {
                  if (e2.persisted) {
                    var loadingElements = document2.querySelectorAll("." + lazySizesCfg.loadingClass);
                    if (loadingElements.length && loadingElements.forEach) {
                      requestAnimationFrame(function() {
                        loadingElements.forEach(function(img) {
                          if (img.complete) {
                            unveilElement(img);
                          }
                        });
                      });
                    }
                  }
                });
                if (window2.MutationObserver) {
                  new MutationObserver(throttledCheckElements).observe(docElem, { childList: true, subtree: true, attributes: true });
                } else {
                  docElem[_addEventListener]("DOMNodeInserted", throttledCheckElements, true);
                  docElem[_addEventListener]("DOMAttrModified", throttledCheckElements, true);
                  setInterval(throttledCheckElements, 999);
                }
                addEventListener("hashchange", throttledCheckElements, true);
                ["focus", "mouseover", "click", "load", "transitionend", "animationend"].forEach(function(name) {
                  document2[_addEventListener](name, throttledCheckElements, true);
                });
                if (/d$|^c/.test(document2.readyState)) {
                  onload();
                } else {
                  addEventListener("load", onload);
                  document2[_addEventListener]("DOMContentLoaded", throttledCheckElements);
                  setTimeout2(onload, 2e4);
                }
                if (lazysizes.elements.length) {
                  checkElements();
                  rAF._lsFlush();
                } else {
                  throttledCheckElements();
                }
              },
              checkElems: throttledCheckElements,
              unveil: unveilElement,
              _aLSL: altLoadmodeScrollListner
            };
          }();
          var autoSizer = function() {
            var autosizesElems;
            var sizeElement = rAFIt(function(elem, parent, event, width) {
              var sources, i3, len;
              elem._lazysizesWidth = width;
              width += "px";
              elem.setAttribute("sizes", width);
              if (regPicture.test(parent.nodeName || "")) {
                sources = parent.getElementsByTagName("source");
                for (i3 = 0, len = sources.length; i3 < len; i3++) {
                  sources[i3].setAttribute("sizes", width);
                }
              }
              if (!event.detail.dataAttr) {
                updatePolyfill(elem, event.detail);
              }
            });
            var getSizeElement = function(elem, dataAttr, width) {
              var event;
              var parent = elem.parentNode;
              if (parent) {
                width = getWidth(elem, parent, width);
                event = triggerEvent(elem, "lazybeforesizes", { width, dataAttr: !!dataAttr });
                if (!event.defaultPrevented) {
                  width = event.detail.width;
                  if (width && width !== elem._lazysizesWidth) {
                    sizeElement(elem, parent, event, width);
                  }
                }
              }
            };
            var updateElementsSizes = function() {
              var i3;
              var len = autosizesElems.length;
              if (len) {
                i3 = 0;
                for (; i3 < len; i3++) {
                  getSizeElement(autosizesElems[i3]);
                }
              }
            };
            var debouncedUpdateElementsSizes = debounce(updateElementsSizes);
            return {
              _: function() {
                autosizesElems = document2.getElementsByClassName(lazySizesCfg.autosizesClass);
                addEventListener("resize", debouncedUpdateElementsSizes);
              },
              checkElems: debouncedUpdateElementsSizes,
              updateElem: getSizeElement
            };
          }();
          var init = function() {
            if (!init.i && document2.getElementsByClassName) {
              init.i = true;
              autoSizer._();
              loader._();
            }
          };
          setTimeout2(function() {
            if (lazySizesCfg.init) {
              init();
            }
          });
          lazysizes = {
            /**
             * @type { LazySizesConfigPartial }
             */
            cfg: lazySizesCfg,
            autoSizer,
            loader,
            init,
            uP: updatePolyfill,
            aC: addClass,
            rC: removeClass,
            hC: hasClass,
            fire: triggerEvent,
            gW: getWidth,
            rAF
          };
          return lazysizes;
        }
      );
    }
  });

  // node_modules/lazysizes/plugins/native-loading/ls.native-loading.js
  var require_ls_native_loading = __commonJS({
    "node_modules/lazysizes/plugins/native-loading/ls.native-loading.js"(exports, module) {
      (function(window2, factory) {
        var globalInstall = function() {
          factory(window2.lazySizes);
          window2.removeEventListener("lazyunveilread", globalInstall, true);
        };
        factory = factory.bind(null, window2, window2.document);
        if (typeof module == "object" && module.exports) {
          factory(require_lazysizes());
        } else if (typeof define == "function" && define.amd) {
          define(["lazysizes"], factory);
        } else if (window2.lazySizes) {
          globalInstall();
        } else {
          window2.addEventListener("lazyunveilread", globalInstall, true);
        }
      })(window, function(window2, document2, lazySizes2) {
        "use strict";
        var imgSupport = "loading" in HTMLImageElement.prototype;
        var iframeSupport = "loading" in HTMLIFrameElement.prototype;
        var isConfigSet = false;
        var oldPrematureUnveil = lazySizes2.prematureUnveil;
        var cfg = lazySizes2.cfg;
        var listenerMap = {
          focus: 1,
          mouseover: 1,
          click: 1,
          load: 1,
          transitionend: 1,
          animationend: 1,
          scroll: 1,
          resize: 1
        };
        if (!cfg.nativeLoading) {
          cfg.nativeLoading = {};
        }
        if (!window2.addEventListener || !window2.MutationObserver || !imgSupport && !iframeSupport) {
          return;
        }
        function disableEvents() {
          var loader = lazySizes2.loader;
          var throttledCheckElements = loader.checkElems;
          var removeALSL = function() {
            setTimeout(function() {
              window2.removeEventListener("scroll", loader._aLSL, true);
            }, 1e3);
          };
          var currentListenerMap = typeof cfg.nativeLoading.disableListeners == "object" ? cfg.nativeLoading.disableListeners : listenerMap;
          if (currentListenerMap.scroll) {
            window2.addEventListener("load", removeALSL);
            removeALSL();
            window2.removeEventListener("scroll", throttledCheckElements, true);
          }
          if (currentListenerMap.resize) {
            window2.removeEventListener("resize", throttledCheckElements, true);
          }
          Object.keys(currentListenerMap).forEach(function(name) {
            if (currentListenerMap[name]) {
              document2.removeEventListener(name, throttledCheckElements, true);
            }
          });
        }
        function runConfig() {
          if (isConfigSet) {
            return;
          }
          isConfigSet = true;
          if (imgSupport && iframeSupport && cfg.nativeLoading.disableListeners) {
            if (cfg.nativeLoading.disableListeners === true) {
              cfg.nativeLoading.setLoadingAttribute = true;
            }
            disableEvents();
          }
          if (cfg.nativeLoading.setLoadingAttribute) {
            window2.addEventListener("lazybeforeunveil", function(e2) {
              var element = e2.target;
              if ("loading" in element && !element.getAttribute("loading")) {
                element.setAttribute("loading", "lazy");
              }
            }, true);
          }
        }
        lazySizes2.prematureUnveil = function prematureUnveil(element) {
          if (!isConfigSet) {
            runConfig();
          }
          if ("loading" in element && (cfg.nativeLoading.setLoadingAttribute || element.getAttribute("loading")) && (element.getAttribute("data-sizes") != "auto" || element.offsetWidth)) {
            return true;
          }
          if (oldPrematureUnveil) {
            return oldPrematureUnveil(element);
          }
        };
      });
    }
  });

  // node_modules/clipboard/dist/clipboard.js
  var require_clipboard = __commonJS({
    "node_modules/clipboard/dist/clipboard.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["ClipboardJS"] = factory();
        else
          root["ClipboardJS"] = factory();
      })(exports, function() {
        return (
          /******/
          function() {
            var __webpack_modules__ = {
              /***/
              686: (
                /***/
                function(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
                  "use strict";
                  __webpack_require__2.d(__webpack_exports__, {
                    "default": function() {
                      return (
                        /* binding */
                        clipboard
                      );
                    }
                  });
                  var tiny_emitter = __webpack_require__2(279);
                  var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
                  var listen = __webpack_require__2(370);
                  var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
                  var src_select = __webpack_require__2(817);
                  var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
                  ;
                  function command(type) {
                    try {
                      return document.execCommand(type);
                    } catch (err) {
                      return false;
                    }
                  }
                  ;
                  var ClipboardActionCut = function ClipboardActionCut2(target) {
                    var selectedText = select_default()(target);
                    command("cut");
                    return selectedText;
                  };
                  var actions_cut = ClipboardActionCut;
                  ;
                  function createFakeElement(value) {
                    var isRTL = document.documentElement.getAttribute("dir") === "rtl";
                    var fakeElement = document.createElement("textarea");
                    fakeElement.style.fontSize = "12pt";
                    fakeElement.style.border = "0";
                    fakeElement.style.padding = "0";
                    fakeElement.style.margin = "0";
                    fakeElement.style.position = "absolute";
                    fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
                    var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                    fakeElement.style.top = "".concat(yPosition, "px");
                    fakeElement.setAttribute("readonly", "");
                    fakeElement.value = value;
                    return fakeElement;
                  }
                  ;
                  var fakeCopyAction = function fakeCopyAction2(value, options) {
                    var fakeElement = createFakeElement(value);
                    options.container.appendChild(fakeElement);
                    var selectedText = select_default()(fakeElement);
                    command("copy");
                    fakeElement.remove();
                    return selectedText;
                  };
                  var ClipboardActionCopy = function ClipboardActionCopy2(target) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    var selectedText = "";
                    if (typeof target === "string") {
                      selectedText = fakeCopyAction(target, options);
                    } else if (target instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target === null || target === void 0 ? void 0 : target.type)) {
                      selectedText = fakeCopyAction(target.value, options);
                    } else {
                      selectedText = select_default()(target);
                      command("copy");
                    }
                    return selectedText;
                  };
                  var actions_copy = ClipboardActionCopy;
                  ;
                  function _typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      _typeof = function _typeof2(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      _typeof = function _typeof2(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return _typeof(obj);
                  }
                  var ClipboardActionDefault = function ClipboardActionDefault2() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target = options.target, text = options.text;
                    if (action !== "copy" && action !== "cut") {
                      throw new Error('Invalid "action" value, use either "copy" or "cut"');
                    }
                    if (target !== void 0) {
                      if (target && _typeof(target) === "object" && target.nodeType === 1) {
                        if (action === "copy" && target.hasAttribute("disabled")) {
                          throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }
                        if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                          throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                        }
                      } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                      }
                    }
                    if (text) {
                      return actions_copy(text, {
                        container
                      });
                    }
                    if (target) {
                      return action === "cut" ? actions_cut(target) : actions_copy(target, {
                        container
                      });
                    }
                  };
                  var actions_default = ClipboardActionDefault;
                  ;
                  function clipboard_typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      clipboard_typeof = function _typeof2(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      clipboard_typeof = function _typeof2(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return clipboard_typeof(obj);
                  }
                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function _defineProperties(target, props) {
                    for (var i3 = 0; i3 < props.length; i3++) {
                      var descriptor = props[i3];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                  }
                  function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                  }
                  function _setPrototypeOf(o2, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p2) {
                      o3.__proto__ = p2;
                      return o3;
                    };
                    return _setPrototypeOf(o2, p);
                  }
                  function _createSuper(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = _getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return _possibleConstructorReturn(this, result);
                    };
                  }
                  function _possibleConstructorReturn(self2, call) {
                    if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    }
                    return _assertThisInitialized(self2);
                  }
                  function _assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                      }));
                      return true;
                    } catch (e2) {
                      return false;
                    }
                  }
                  function _getPrototypeOf(o2) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
                      return o3.__proto__ || Object.getPrototypeOf(o3);
                    };
                    return _getPrototypeOf(o2);
                  }
                  function getAttributeValue(suffix, element) {
                    var attribute = "data-clipboard-".concat(suffix);
                    if (!element.hasAttribute(attribute)) {
                      return;
                    }
                    return element.getAttribute(attribute);
                  }
                  var Clipboard2 = /* @__PURE__ */ function(_Emitter) {
                    _inherits(Clipboard3, _Emitter);
                    var _super = _createSuper(Clipboard3);
                    function Clipboard3(trigger, options) {
                      var _this;
                      _classCallCheck(this, Clipboard3);
                      _this = _super.call(this);
                      _this.resolveOptions(options);
                      _this.listenClick(trigger);
                      return _this;
                    }
                    _createClass(Clipboard3, [{
                      key: "resolveOptions",
                      value: function resolveOptions() {
                        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                        this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                        this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                        this.text = typeof options.text === "function" ? options.text : this.defaultText;
                        this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
                      }
                      /**
                       * Adds a click event listener to the passed trigger.
                       * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                       */
                    }, {
                      key: "listenClick",
                      value: function listenClick(trigger) {
                        var _this2 = this;
                        this.listener = listen_default()(trigger, "click", function(e2) {
                          return _this2.onClick(e2);
                        });
                      }
                      /**
                       * Defines a new `ClipboardAction` on each click event.
                       * @param {Event} e
                       */
                    }, {
                      key: "onClick",
                      value: function onClick(e2) {
                        var trigger = e2.delegateTarget || e2.currentTarget;
                        var action = this.action(trigger) || "copy";
                        var text = actions_default({
                          action,
                          container: this.container,
                          target: this.target(trigger),
                          text: this.text(trigger)
                        });
                        this.emit(text ? "success" : "error", {
                          action,
                          text,
                          trigger,
                          clearSelection: function clearSelection() {
                            if (trigger) {
                              trigger.focus();
                            }
                            window.getSelection().removeAllRanges();
                          }
                        });
                      }
                      /**
                       * Default `action` lookup function.
                       * @param {Element} trigger
                       */
                    }, {
                      key: "defaultAction",
                      value: function defaultAction(trigger) {
                        return getAttributeValue("action", trigger);
                      }
                      /**
                       * Default `target` lookup function.
                       * @param {Element} trigger
                       */
                    }, {
                      key: "defaultTarget",
                      value: function defaultTarget(trigger) {
                        var selector = getAttributeValue("target", trigger);
                        if (selector) {
                          return document.querySelector(selector);
                        }
                      }
                      /**
                       * Allow fire programmatically a copy action
                       * @param {String|HTMLElement} target
                       * @param {Object} options
                       * @returns Text copied.
                       */
                    }, {
                      key: "defaultText",
                      /**
                       * Default `text` lookup function.
                       * @param {Element} trigger
                       */
                      value: function defaultText(trigger) {
                        return getAttributeValue("text", trigger);
                      }
                      /**
                       * Destroy lifecycle.
                       */
                    }, {
                      key: "destroy",
                      value: function destroy() {
                        this.listener.destroy();
                      }
                    }], [{
                      key: "copy",
                      value: function copy(target) {
                        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                          container: document.body
                        };
                        return actions_copy(target, options);
                      }
                      /**
                       * Allow fire programmatically a cut action
                       * @param {String|HTMLElement} target
                       * @returns Text cutted.
                       */
                    }, {
                      key: "cut",
                      value: function cut(target) {
                        return actions_cut(target);
                      }
                      /**
                       * Returns the support of the given action, or all actions if no action is
                       * given.
                       * @param {String} [action]
                       */
                    }, {
                      key: "isSupported",
                      value: function isSupported() {
                        var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                        var actions = typeof action === "string" ? [action] : action;
                        var support = !!document.queryCommandSupported;
                        actions.forEach(function(action2) {
                          support = support && !!document.queryCommandSupported(action2);
                        });
                        return support;
                      }
                    }]);
                    return Clipboard3;
                  }(tiny_emitter_default());
                  var clipboard = Clipboard2;
                }
              ),
              /***/
              828: (
                /***/
                function(module2) {
                  var DOCUMENT_NODE_TYPE = 9;
                  if (typeof Element !== "undefined" && !Element.prototype.matches) {
                    var proto = Element.prototype;
                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
                  }
                  function closest(element, selector) {
                    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                      if (typeof element.matches === "function" && element.matches(selector)) {
                        return element;
                      }
                      element = element.parentNode;
                    }
                  }
                  module2.exports = closest;
                }
              ),
              /***/
              438: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var closest = __webpack_require__2(828);
                  function _delegate(element, selector, type, callback, useCapture) {
                    var listenerFn = listener.apply(this, arguments);
                    element.addEventListener(type, listenerFn, useCapture);
                    return {
                      destroy: function() {
                        element.removeEventListener(type, listenerFn, useCapture);
                      }
                    };
                  }
                  function delegate(elements, selector, type, callback, useCapture) {
                    if (typeof elements.addEventListener === "function") {
                      return _delegate.apply(null, arguments);
                    }
                    if (typeof type === "function") {
                      return _delegate.bind(null, document).apply(null, arguments);
                    }
                    if (typeof elements === "string") {
                      elements = document.querySelectorAll(elements);
                    }
                    return Array.prototype.map.call(elements, function(element) {
                      return _delegate(element, selector, type, callback, useCapture);
                    });
                  }
                  function listener(element, selector, type, callback) {
                    return function(e2) {
                      e2.delegateTarget = closest(e2.target, selector);
                      if (e2.delegateTarget) {
                        callback.call(element, e2);
                      }
                    };
                  }
                  module2.exports = delegate;
                }
              ),
              /***/
              879: (
                /***/
                function(__unused_webpack_module, exports2) {
                  exports2.node = function(value) {
                    return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
                  };
                  exports2.nodeList = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports2.node(value[0]));
                  };
                  exports2.string = function(value) {
                    return typeof value === "string" || value instanceof String;
                  };
                  exports2.fn = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return type === "[object Function]";
                  };
                }
              ),
              /***/
              370: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var is = __webpack_require__2(879);
                  var delegate = __webpack_require__2(438);
                  function listen(target, type, callback) {
                    if (!target && !type && !callback) {
                      throw new Error("Missing required arguments");
                    }
                    if (!is.string(type)) {
                      throw new TypeError("Second argument must be a String");
                    }
                    if (!is.fn(callback)) {
                      throw new TypeError("Third argument must be a Function");
                    }
                    if (is.node(target)) {
                      return listenNode(target, type, callback);
                    } else if (is.nodeList(target)) {
                      return listenNodeList(target, type, callback);
                    } else if (is.string(target)) {
                      return listenSelector(target, type, callback);
                    } else {
                      throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                    }
                  }
                  function listenNode(node, type, callback) {
                    node.addEventListener(type, callback);
                    return {
                      destroy: function() {
                        node.removeEventListener(type, callback);
                      }
                    };
                  }
                  function listenNodeList(nodeList, type, callback) {
                    Array.prototype.forEach.call(nodeList, function(node) {
                      node.addEventListener(type, callback);
                    });
                    return {
                      destroy: function() {
                        Array.prototype.forEach.call(nodeList, function(node) {
                          node.removeEventListener(type, callback);
                        });
                      }
                    };
                  }
                  function listenSelector(selector, type, callback) {
                    return delegate(document.body, selector, type, callback);
                  }
                  module2.exports = listen;
                }
              ),
              /***/
              817: (
                /***/
                function(module2) {
                  function select(element) {
                    var selectedText;
                    if (element.nodeName === "SELECT") {
                      element.focus();
                      selectedText = element.value;
                    } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
                      var isReadOnly = element.hasAttribute("readonly");
                      if (!isReadOnly) {
                        element.setAttribute("readonly", "");
                      }
                      element.select();
                      element.setSelectionRange(0, element.value.length);
                      if (!isReadOnly) {
                        element.removeAttribute("readonly");
                      }
                      selectedText = element.value;
                    } else {
                      if (element.hasAttribute("contenteditable")) {
                        element.focus();
                      }
                      var selection = window.getSelection();
                      var range = document.createRange();
                      range.selectNodeContents(element);
                      selection.removeAllRanges();
                      selection.addRange(range);
                      selectedText = selection.toString();
                    }
                    return selectedText;
                  }
                  module2.exports = select;
                }
              ),
              /***/
              279: (
                /***/
                function(module2) {
                  function E() {
                  }
                  E.prototype = {
                    on: function(name, callback, ctx) {
                      var e2 = this.e || (this.e = {});
                      (e2[name] || (e2[name] = [])).push({
                        fn: callback,
                        ctx
                      });
                      return this;
                    },
                    once: function(name, callback, ctx) {
                      var self2 = this;
                      function listener() {
                        self2.off(name, listener);
                        callback.apply(ctx, arguments);
                      }
                      ;
                      listener._ = callback;
                      return this.on(name, listener, ctx);
                    },
                    emit: function(name) {
                      var data = [].slice.call(arguments, 1);
                      var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                      var i3 = 0;
                      var len = evtArr.length;
                      for (i3; i3 < len; i3++) {
                        evtArr[i3].fn.apply(evtArr[i3].ctx, data);
                      }
                      return this;
                    },
                    off: function(name, callback) {
                      var e2 = this.e || (this.e = {});
                      var evts = e2[name];
                      var liveEvents = [];
                      if (evts && callback) {
                        for (var i3 = 0, len = evts.length; i3 < len; i3++) {
                          if (evts[i3].fn !== callback && evts[i3].fn._ !== callback)
                            liveEvents.push(evts[i3]);
                        }
                      }
                      liveEvents.length ? e2[name] = liveEvents : delete e2[name];
                      return this;
                    }
                  };
                  module2.exports = E;
                  module2.exports.TinyEmitter = E;
                }
              )
              /******/
            };
            var __webpack_module_cache__ = {};
            function __webpack_require__(moduleId) {
              if (__webpack_module_cache__[moduleId]) {
                return __webpack_module_cache__[moduleId].exports;
              }
              var module2 = __webpack_module_cache__[moduleId] = {
                /******/
                // no module.id needed
                /******/
                // no module.loaded needed
                /******/
                exports: {}
                /******/
              };
              __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
              return module2.exports;
            }
            !function() {
              __webpack_require__.n = function(module2) {
                var getter = module2 && module2.__esModule ? (
                  /******/
                  function() {
                    return module2["default"];
                  }
                ) : (
                  /******/
                  function() {
                    return module2;
                  }
                );
                __webpack_require__.d(getter, { a: getter });
                return getter;
              };
            }();
            !function() {
              __webpack_require__.d = function(exports2, definition) {
                for (var key in definition) {
                  if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                    Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                  }
                }
              };
            }();
            !function() {
              __webpack_require__.o = function(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
              };
            }();
            return __webpack_require__(686);
          }().default
        );
      });
    }
  });

  // node_modules/bootstrap/dist/js/bootstrap.bundle.min.js
  var require_bootstrap_bundle_min = __commonJS({
    "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"(exports, module) {
      !function(t2, e2) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).bootstrap = e2();
      }(exports, function() {
        "use strict";
        const t2 = /* @__PURE__ */ new Map(), e2 = { set(e3, i4, n3) {
          t2.has(e3) || t2.set(e3, /* @__PURE__ */ new Map());
          const s3 = t2.get(e3);
          s3.has(i4) || 0 === s3.size ? s3.set(i4, n3) : console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s3.keys())[0]}.`);
        }, get: (e3, i4) => t2.has(e3) && t2.get(e3).get(i4) || null, remove(e3, i4) {
          if (!t2.has(e3)) return;
          const n3 = t2.get(e3);
          n3.delete(i4), 0 === n3.size && t2.delete(e3);
        } }, i3 = "transitionend", n2 = (t3) => (t3 && window.CSS && window.CSS.escape && (t3 = t3.replace(/#([^\s"#']+)/g, (t4, e3) => `#${CSS.escape(e3)}`)), t3), s2 = (t3) => {
          t3.dispatchEvent(new Event(i3));
        }, o2 = (t3) => !(!t3 || "object" != typeof t3) && (void 0 !== t3.jquery && (t3 = t3[0]), void 0 !== t3.nodeType), r2 = (t3) => o2(t3) ? t3.jquery ? t3[0] : t3 : "string" == typeof t3 && t3.length > 0 ? document.querySelector(n2(t3)) : null, a2 = (t3) => {
          if (!o2(t3) || 0 === t3.getClientRects().length) return false;
          const e3 = "visible" === getComputedStyle(t3).getPropertyValue("visibility"), i4 = t3.closest("details:not([open])");
          if (!i4) return e3;
          if (i4 !== t3) {
            const e4 = t3.closest("summary");
            if (e4 && e4.parentNode !== i4) return false;
            if (null === e4) return false;
          }
          return e3;
        }, l = (t3) => !t3 || t3.nodeType !== Node.ELEMENT_NODE || !!t3.classList.contains("disabled") || (void 0 !== t3.disabled ? t3.disabled : t3.hasAttribute("disabled") && "false" !== t3.getAttribute("disabled")), c2 = (t3) => {
          if (!document.documentElement.attachShadow) return null;
          if ("function" == typeof t3.getRootNode) {
            const e3 = t3.getRootNode();
            return e3 instanceof ShadowRoot ? e3 : null;
          }
          return t3 instanceof ShadowRoot ? t3 : t3.parentNode ? c2(t3.parentNode) : null;
        }, h = () => {
        }, d = (t3) => {
          t3.offsetHeight;
        }, u2 = () => window.jQuery && !document.body.hasAttribute("data-bs-no-jquery") ? window.jQuery : null, f2 = [], p = () => "rtl" === document.documentElement.dir, m = (t3) => {
          var e3;
          e3 = () => {
            const e4 = u2();
            if (e4) {
              const i4 = t3.NAME, n3 = e4.fn[i4];
              e4.fn[i4] = t3.jQueryInterface, e4.fn[i4].Constructor = t3, e4.fn[i4].noConflict = () => (e4.fn[i4] = n3, t3.jQueryInterface);
            }
          }, "loading" === document.readyState ? (f2.length || document.addEventListener("DOMContentLoaded", () => {
            for (const t4 of f2) t4();
          }), f2.push(e3)) : e3();
        }, g = (t3, e3 = [], i4 = t3) => "function" == typeof t3 ? t3(...e3) : i4, _ = (t3, e3, n3 = true) => {
          if (!n3) return void g(t3);
          const o3 = ((t4) => {
            if (!t4) return 0;
            let { transitionDuration: e4, transitionDelay: i4 } = window.getComputedStyle(t4);
            const n4 = Number.parseFloat(e4), s3 = Number.parseFloat(i4);
            return n4 || s3 ? (e4 = e4.split(",")[0], i4 = i4.split(",")[0], 1e3 * (Number.parseFloat(e4) + Number.parseFloat(i4))) : 0;
          })(e3) + 5;
          let r3 = false;
          const a3 = ({ target: n4 }) => {
            n4 === e3 && (r3 = true, e3.removeEventListener(i3, a3), g(t3));
          };
          e3.addEventListener(i3, a3), setTimeout(() => {
            r3 || s2(e3);
          }, o3);
        }, b = (t3, e3, i4, n3) => {
          const s3 = t3.length;
          let o3 = t3.indexOf(e3);
          return -1 === o3 ? !i4 && n3 ? t3[s3 - 1] : t3[0] : (o3 += i4 ? 1 : -1, n3 && (o3 = (o3 + s3) % s3), t3[Math.max(0, Math.min(o3, s3 - 1))]);
        }, v = /[^.]*(?=\..*)\.|.*/, y = /\..*/, w = /::\d+$/, A = {};
        let E = 1;
        const T = { mouseenter: "mouseover", mouseleave: "mouseout" }, C = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
        function O(t3, e3) {
          return e3 && `${e3}::${E++}` || t3.uidEvent || E++;
        }
        function x(t3) {
          const e3 = O(t3);
          return t3.uidEvent = e3, A[e3] = A[e3] || {}, A[e3];
        }
        function k(t3, e3, i4 = null) {
          return Object.values(t3).find((t4) => t4.callable === e3 && t4.delegationSelector === i4);
        }
        function L(t3, e3, i4) {
          const n3 = "string" == typeof e3, s3 = n3 ? i4 : e3 || i4;
          let o3 = I(t3);
          return C.has(o3) || (o3 = t3), [n3, s3, o3];
        }
        function S(t3, e3, i4, n3, s3) {
          if ("string" != typeof e3 || !t3) return;
          let [o3, r3, a3] = L(e3, i4, n3);
          if (e3 in T) {
            const t4 = (t5) => function(e4) {
              if (!e4.relatedTarget || e4.relatedTarget !== e4.delegateTarget && !e4.delegateTarget.contains(e4.relatedTarget)) return t5.call(this, e4);
            };
            r3 = t4(r3);
          }
          const l2 = x(t3), c3 = l2[a3] || (l2[a3] = {}), h2 = k(c3, r3, o3 ? i4 : null);
          if (h2) return void (h2.oneOff = h2.oneOff && s3);
          const d2 = O(r3, e3.replace(v, "")), u3 = o3 ? /* @__PURE__ */ function(t4, e4, i5) {
            return function n4(s4) {
              const o4 = t4.querySelectorAll(e4);
              for (let { target: r4 } = s4; r4 && r4 !== this; r4 = r4.parentNode) for (const a4 of o4) if (a4 === r4) return P(s4, { delegateTarget: r4 }), n4.oneOff && N.off(t4, s4.type, e4, i5), i5.apply(r4, [s4]);
            };
          }(t3, i4, r3) : /* @__PURE__ */ function(t4, e4) {
            return function i5(n4) {
              return P(n4, { delegateTarget: t4 }), i5.oneOff && N.off(t4, n4.type, e4), e4.apply(t4, [n4]);
            };
          }(t3, r3);
          u3.delegationSelector = o3 ? i4 : null, u3.callable = r3, u3.oneOff = s3, u3.uidEvent = d2, c3[d2] = u3, t3.addEventListener(a3, u3, o3);
        }
        function D(t3, e3, i4, n3, s3) {
          const o3 = k(e3[i4], n3, s3);
          o3 && (t3.removeEventListener(i4, o3, Boolean(s3)), delete e3[i4][o3.uidEvent]);
        }
        function $(t3, e3, i4, n3) {
          const s3 = e3[i4] || {};
          for (const [o3, r3] of Object.entries(s3)) o3.includes(n3) && D(t3, e3, i4, r3.callable, r3.delegationSelector);
        }
        function I(t3) {
          return t3 = t3.replace(y, ""), T[t3] || t3;
        }
        const N = { on(t3, e3, i4, n3) {
          S(t3, e3, i4, n3, false);
        }, one(t3, e3, i4, n3) {
          S(t3, e3, i4, n3, true);
        }, off(t3, e3, i4, n3) {
          if ("string" != typeof e3 || !t3) return;
          const [s3, o3, r3] = L(e3, i4, n3), a3 = r3 !== e3, l2 = x(t3), c3 = l2[r3] || {}, h2 = e3.startsWith(".");
          if (void 0 === o3) {
            if (h2) for (const i5 of Object.keys(l2)) $(t3, l2, i5, e3.slice(1));
            for (const [i5, n4] of Object.entries(c3)) {
              const s4 = i5.replace(w, "");
              a3 && !e3.includes(s4) || D(t3, l2, r3, n4.callable, n4.delegationSelector);
            }
          } else {
            if (!Object.keys(c3).length) return;
            D(t3, l2, r3, o3, s3 ? i4 : null);
          }
        }, trigger(t3, e3, i4) {
          if ("string" != typeof e3 || !t3) return null;
          const n3 = u2();
          let s3 = null, o3 = true, r3 = true, a3 = false;
          e3 !== I(e3) && n3 && (s3 = n3.Event(e3, i4), n3(t3).trigger(s3), o3 = !s3.isPropagationStopped(), r3 = !s3.isImmediatePropagationStopped(), a3 = s3.isDefaultPrevented());
          const l2 = P(new Event(e3, { bubbles: o3, cancelable: true }), i4);
          return a3 && l2.preventDefault(), r3 && t3.dispatchEvent(l2), l2.defaultPrevented && s3 && s3.preventDefault(), l2;
        } };
        function P(t3, e3 = {}) {
          for (const [i4, n3] of Object.entries(e3)) try {
            t3[i4] = n3;
          } catch (e4) {
            Object.defineProperty(t3, i4, { configurable: true, get: () => n3 });
          }
          return t3;
        }
        function j(t3) {
          if ("true" === t3) return true;
          if ("false" === t3) return false;
          if (t3 === Number(t3).toString()) return Number(t3);
          if ("" === t3 || "null" === t3) return null;
          if ("string" != typeof t3) return t3;
          try {
            return JSON.parse(decodeURIComponent(t3));
          } catch (e3) {
            return t3;
          }
        }
        function M(t3) {
          return t3.replace(/[A-Z]/g, (t4) => `-${t4.toLowerCase()}`);
        }
        const F = { setDataAttribute(t3, e3, i4) {
          t3.setAttribute(`data-bs-${M(e3)}`, i4);
        }, removeDataAttribute(t3, e3) {
          t3.removeAttribute(`data-bs-${M(e3)}`);
        }, getDataAttributes(t3) {
          if (!t3) return {};
          const e3 = {}, i4 = Object.keys(t3.dataset).filter((t4) => t4.startsWith("bs") && !t4.startsWith("bsConfig"));
          for (const n3 of i4) {
            let i5 = n3.replace(/^bs/, "");
            i5 = i5.charAt(0).toLowerCase() + i5.slice(1, i5.length), e3[i5] = j(t3.dataset[n3]);
          }
          return e3;
        }, getDataAttribute: (t3, e3) => j(t3.getAttribute(`data-bs-${M(e3)}`)) };
        class H {
          static get Default() {
            return {};
          }
          static get DefaultType() {
            return {};
          }
          static get NAME() {
            throw new Error('You have to implement the static method "NAME", for each component!');
          }
          _getConfig(t3) {
            return t3 = this._mergeConfigObj(t3), t3 = this._configAfterMerge(t3), this._typeCheckConfig(t3), t3;
          }
          _configAfterMerge(t3) {
            return t3;
          }
          _mergeConfigObj(t3, e3) {
            const i4 = o2(e3) ? F.getDataAttribute(e3, "config") : {};
            return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, this.constructor.Default), "object" == typeof i4 ? i4 : {}), o2(e3) ? F.getDataAttributes(e3) : {}), "object" == typeof t3 ? t3 : {});
          }
          _typeCheckConfig(t3, e3 = this.constructor.DefaultType) {
            for (const [n3, s3] of Object.entries(e3)) {
              const e4 = t3[n3], r3 = o2(e4) ? "element" : null == (i4 = e4) ? `${i4}` : Object.prototype.toString.call(i4).match(/\s([a-z]+)/i)[1].toLowerCase();
              if (!new RegExp(s3).test(r3)) throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n3}" provided type "${r3}" but expected type "${s3}".`);
            }
            var i4;
          }
        }
        class W extends H {
          constructor(t3, i4) {
            super(), (t3 = r2(t3)) && (this._element = t3, this._config = this._getConfig(i4), e2.set(this._element, this.constructor.DATA_KEY, this));
          }
          dispose() {
            e2.remove(this._element, this.constructor.DATA_KEY), N.off(this._element, this.constructor.EVENT_KEY);
            for (const t3 of Object.getOwnPropertyNames(this)) this[t3] = null;
          }
          _queueCallback(t3, e3, i4 = true) {
            _(t3, e3, i4);
          }
          _getConfig(t3) {
            return t3 = this._mergeConfigObj(t3, this._element), t3 = this._configAfterMerge(t3), this._typeCheckConfig(t3), t3;
          }
          static getInstance(t3) {
            return e2.get(r2(t3), this.DATA_KEY);
          }
          static getOrCreateInstance(t3, e3 = {}) {
            return this.getInstance(t3) || new this(t3, "object" == typeof e3 ? e3 : null);
          }
          static get VERSION() {
            return "5.3.3";
          }
          static get DATA_KEY() {
            return `bs.${this.NAME}`;
          }
          static get EVENT_KEY() {
            return `.${this.DATA_KEY}`;
          }
          static eventName(t3) {
            return `${t3}${this.EVENT_KEY}`;
          }
        }
        const B = (t3) => {
          let e3 = t3.getAttribute("data-bs-target");
          if (!e3 || "#" === e3) {
            let i4 = t3.getAttribute("href");
            if (!i4 || !i4.includes("#") && !i4.startsWith(".")) return null;
            i4.includes("#") && !i4.startsWith("#") && (i4 = `#${i4.split("#")[1]}`), e3 = i4 && "#" !== i4 ? i4.trim() : null;
          }
          return e3 ? e3.split(",").map((t4) => n2(t4)).join(",") : null;
        }, z = { find: (t3, e3 = document.documentElement) => [].concat(...Element.prototype.querySelectorAll.call(e3, t3)), findOne: (t3, e3 = document.documentElement) => Element.prototype.querySelector.call(e3, t3), children: (t3, e3) => [].concat(...t3.children).filter((t4) => t4.matches(e3)), parents(t3, e3) {
          const i4 = [];
          let n3 = t3.parentNode.closest(e3);
          for (; n3; ) i4.push(n3), n3 = n3.parentNode.closest(e3);
          return i4;
        }, prev(t3, e3) {
          let i4 = t3.previousElementSibling;
          for (; i4; ) {
            if (i4.matches(e3)) return [i4];
            i4 = i4.previousElementSibling;
          }
          return [];
        }, next(t3, e3) {
          let i4 = t3.nextElementSibling;
          for (; i4; ) {
            if (i4.matches(e3)) return [i4];
            i4 = i4.nextElementSibling;
          }
          return [];
        }, focusableChildren(t3) {
          const e3 = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((t4) => `${t4}:not([tabindex^="-"])`).join(",");
          return this.find(e3, t3).filter((t4) => !l(t4) && a2(t4));
        }, getSelectorFromElement(t3) {
          const e3 = B(t3);
          return e3 && z.findOne(e3) ? e3 : null;
        }, getElementFromSelector(t3) {
          const e3 = B(t3);
          return e3 ? z.findOne(e3) : null;
        }, getMultipleElementsFromSelector(t3) {
          const e3 = B(t3);
          return e3 ? z.find(e3) : [];
        } }, R = (t3, e3 = "hide") => {
          const i4 = `click.dismiss${t3.EVENT_KEY}`, n3 = t3.NAME;
          N.on(document, i4, `[data-bs-dismiss="${n3}"]`, function(i5) {
            if (["A", "AREA"].includes(this.tagName) && i5.preventDefault(), l(this)) return;
            const s3 = z.getElementFromSelector(this) || this.closest(`.${n3}`);
            t3.getOrCreateInstance(s3)[e3]();
          });
        }, q = ".bs.alert", V = `close${q}`, K = `closed${q}`;
        class Q extends W {
          static get NAME() {
            return "alert";
          }
          close() {
            if (N.trigger(this._element, V).defaultPrevented) return;
            this._element.classList.remove("show");
            const t3 = this._element.classList.contains("fade");
            this._queueCallback(() => this._destroyElement(), this._element, t3);
          }
          _destroyElement() {
            this._element.remove(), N.trigger(this._element, K), this.dispose();
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = Q.getOrCreateInstance(this);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3] || t3.startsWith("_") || "constructor" === t3) throw new TypeError(`No method named "${t3}"`);
                e3[t3](this);
              }
            });
          }
        }
        R(Q, "close"), m(Q);
        const X = '[data-bs-toggle="button"]';
        class Y extends W {
          static get NAME() {
            return "button";
          }
          toggle() {
            this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = Y.getOrCreateInstance(this);
              "toggle" === t3 && e3[t3]();
            });
          }
        }
        N.on(document, "click.bs.button.data-api", X, (t3) => {
          t3.preventDefault();
          const e3 = t3.target.closest(X);
          Y.getOrCreateInstance(e3).toggle();
        }), m(Y);
        const U = ".bs.swipe", G = `touchstart${U}`, J = `touchmove${U}`, Z = `touchend${U}`, tt = `pointerdown${U}`, et = `pointerup${U}`, it = { endCallback: null, leftCallback: null, rightCallback: null }, nt = { endCallback: "(function|null)", leftCallback: "(function|null)", rightCallback: "(function|null)" };
        class st extends H {
          constructor(t3, e3) {
            super(), this._element = t3, t3 && st.isSupported() && (this._config = this._getConfig(e3), this._deltaX = 0, this._supportPointerEvents = Boolean(window.PointerEvent), this._initEvents());
          }
          static get Default() {
            return it;
          }
          static get DefaultType() {
            return nt;
          }
          static get NAME() {
            return "swipe";
          }
          dispose() {
            N.off(this._element, U);
          }
          _start(t3) {
            this._supportPointerEvents ? this._eventIsPointerPenTouch(t3) && (this._deltaX = t3.clientX) : this._deltaX = t3.touches[0].clientX;
          }
          _end(t3) {
            this._eventIsPointerPenTouch(t3) && (this._deltaX = t3.clientX - this._deltaX), this._handleSwipe(), g(this._config.endCallback);
          }
          _move(t3) {
            this._deltaX = t3.touches && t3.touches.length > 1 ? 0 : t3.touches[0].clientX - this._deltaX;
          }
          _handleSwipe() {
            const t3 = Math.abs(this._deltaX);
            if (t3 <= 40) return;
            const e3 = t3 / this._deltaX;
            this._deltaX = 0, e3 && g(e3 > 0 ? this._config.rightCallback : this._config.leftCallback);
          }
          _initEvents() {
            this._supportPointerEvents ? (N.on(this._element, tt, (t3) => this._start(t3)), N.on(this._element, et, (t3) => this._end(t3)), this._element.classList.add("pointer-event")) : (N.on(this._element, G, (t3) => this._start(t3)), N.on(this._element, J, (t3) => this._move(t3)), N.on(this._element, Z, (t3) => this._end(t3)));
          }
          _eventIsPointerPenTouch(t3) {
            return this._supportPointerEvents && ("pen" === t3.pointerType || "touch" === t3.pointerType);
          }
          static isSupported() {
            return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
          }
        }
        const ot = ".bs.carousel", rt = ".data-api", at = "next", lt = "prev", ct = "left", ht = "right", dt = `slide${ot}`, ut = `slid${ot}`, ft = `keydown${ot}`, pt = `mouseenter${ot}`, mt = `mouseleave${ot}`, gt = `dragstart${ot}`, _t = `load${ot}${rt}`, bt = `click${ot}${rt}`, vt = "carousel", yt = "active", wt = ".active", At = ".carousel-item", Et = wt + At, Tt = { ArrowLeft: ht, ArrowRight: ct }, Ct = { interval: 5e3, keyboard: true, pause: "hover", ride: false, touch: true, wrap: true }, Ot = { interval: "(number|boolean)", keyboard: "boolean", pause: "(string|boolean)", ride: "(boolean|string)", touch: "boolean", wrap: "boolean" };
        class xt extends W {
          constructor(t3, e3) {
            super(t3, e3), this._interval = null, this._activeElement = null, this._isSliding = false, this.touchTimeout = null, this._swipeHelper = null, this._indicatorsElement = z.findOne(".carousel-indicators", this._element), this._addEventListeners(), this._config.ride === vt && this.cycle();
          }
          static get Default() {
            return Ct;
          }
          static get DefaultType() {
            return Ot;
          }
          static get NAME() {
            return "carousel";
          }
          next() {
            this._slide(at);
          }
          nextWhenVisible() {
            !document.hidden && a2(this._element) && this.next();
          }
          prev() {
            this._slide(lt);
          }
          pause() {
            this._isSliding && s2(this._element), this._clearInterval();
          }
          cycle() {
            this._clearInterval(), this._updateInterval(), this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
          }
          _maybeEnableCycle() {
            this._config.ride && (this._isSliding ? N.one(this._element, ut, () => this.cycle()) : this.cycle());
          }
          to(t3) {
            const e3 = this._getItems();
            if (t3 > e3.length - 1 || t3 < 0) return;
            if (this._isSliding) return void N.one(this._element, ut, () => this.to(t3));
            const i4 = this._getItemIndex(this._getActive());
            if (i4 === t3) return;
            const n3 = t3 > i4 ? at : lt;
            this._slide(n3, e3[t3]);
          }
          dispose() {
            this._swipeHelper && this._swipeHelper.dispose(), super.dispose();
          }
          _configAfterMerge(t3) {
            return t3.defaultInterval = t3.interval, t3;
          }
          _addEventListeners() {
            this._config.keyboard && N.on(this._element, ft, (t3) => this._keydown(t3)), "hover" === this._config.pause && (N.on(this._element, pt, () => this.pause()), N.on(this._element, mt, () => this._maybeEnableCycle())), this._config.touch && st.isSupported() && this._addTouchEventListeners();
          }
          _addTouchEventListeners() {
            for (const t4 of z.find(".carousel-item img", this._element)) N.on(t4, gt, (t5) => t5.preventDefault());
            const t3 = { leftCallback: () => this._slide(this._directionToOrder(ct)), rightCallback: () => this._slide(this._directionToOrder(ht)), endCallback: () => {
              "hover" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), 500 + this._config.interval));
            } };
            this._swipeHelper = new st(this._element, t3);
          }
          _keydown(t3) {
            if (/input|textarea/i.test(t3.target.tagName)) return;
            const e3 = Tt[t3.key];
            e3 && (t3.preventDefault(), this._slide(this._directionToOrder(e3)));
          }
          _getItemIndex(t3) {
            return this._getItems().indexOf(t3);
          }
          _setActiveIndicatorElement(t3) {
            if (!this._indicatorsElement) return;
            const e3 = z.findOne(wt, this._indicatorsElement);
            e3.classList.remove(yt), e3.removeAttribute("aria-current");
            const i4 = z.findOne(`[data-bs-slide-to="${t3}"]`, this._indicatorsElement);
            i4 && (i4.classList.add(yt), i4.setAttribute("aria-current", "true"));
          }
          _updateInterval() {
            const t3 = this._activeElement || this._getActive();
            if (!t3) return;
            const e3 = Number.parseInt(t3.getAttribute("data-bs-interval"), 10);
            this._config.interval = e3 || this._config.defaultInterval;
          }
          _slide(t3, e3 = null) {
            if (this._isSliding) return;
            const i4 = this._getActive(), n3 = t3 === at, s3 = e3 || b(this._getItems(), i4, n3, this._config.wrap);
            if (s3 === i4) return;
            const o3 = this._getItemIndex(s3), r3 = (e4) => N.trigger(this._element, e4, { relatedTarget: s3, direction: this._orderToDirection(t3), from: this._getItemIndex(i4), to: o3 });
            if (r3(dt).defaultPrevented) return;
            if (!i4 || !s3) return;
            const a3 = Boolean(this._interval);
            this.pause(), this._isSliding = true, this._setActiveIndicatorElement(o3), this._activeElement = s3;
            const l2 = n3 ? "carousel-item-start" : "carousel-item-end", c3 = n3 ? "carousel-item-next" : "carousel-item-prev";
            s3.classList.add(c3), d(s3), i4.classList.add(l2), s3.classList.add(l2), this._queueCallback(() => {
              s3.classList.remove(l2, c3), s3.classList.add(yt), i4.classList.remove(yt, c3, l2), this._isSliding = false, r3(ut);
            }, i4, this._isAnimated()), a3 && this.cycle();
          }
          _isAnimated() {
            return this._element.classList.contains("slide");
          }
          _getActive() {
            return z.findOne(Et, this._element);
          }
          _getItems() {
            return z.find(At, this._element);
          }
          _clearInterval() {
            this._interval && (clearInterval(this._interval), this._interval = null);
          }
          _directionToOrder(t3) {
            return p() ? t3 === ct ? lt : at : t3 === ct ? at : lt;
          }
          _orderToDirection(t3) {
            return p() ? t3 === lt ? ct : ht : t3 === lt ? ht : ct;
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = xt.getOrCreateInstance(this, t3);
              if ("number" != typeof t3) {
                if ("string" == typeof t3) {
                  if (void 0 === e3[t3] || t3.startsWith("_") || "constructor" === t3) throw new TypeError(`No method named "${t3}"`);
                  e3[t3]();
                }
              } else e3.to(t3);
            });
          }
        }
        N.on(document, bt, "[data-bs-slide], [data-bs-slide-to]", function(t3) {
          const e3 = z.getElementFromSelector(this);
          if (!e3 || !e3.classList.contains(vt)) return;
          t3.preventDefault();
          const i4 = xt.getOrCreateInstance(e3), n3 = this.getAttribute("data-bs-slide-to");
          return n3 ? (i4.to(n3), void i4._maybeEnableCycle()) : "next" === F.getDataAttribute(this, "slide") ? (i4.next(), void i4._maybeEnableCycle()) : (i4.prev(), void i4._maybeEnableCycle());
        }), N.on(window, _t, () => {
          const t3 = z.find('[data-bs-ride="carousel"]');
          for (const e3 of t3) xt.getOrCreateInstance(e3);
        }), m(xt);
        const kt = ".bs.collapse", Lt = `show${kt}`, St = `shown${kt}`, Dt = `hide${kt}`, $t = `hidden${kt}`, It = `click${kt}.data-api`, Nt = "show", Pt = "collapse", jt = "collapsing", Mt = `:scope .${Pt} .${Pt}`, Ft = '[data-bs-toggle="collapse"]', Ht = { parent: null, toggle: true }, Wt = { parent: "(null|element)", toggle: "boolean" };
        class Bt extends W {
          constructor(t3, e3) {
            super(t3, e3), this._isTransitioning = false, this._triggerArray = [];
            const i4 = z.find(Ft);
            for (const t4 of i4) {
              const e4 = z.getSelectorFromElement(t4), i5 = z.find(e4).filter((t5) => t5 === this._element);
              null !== e4 && i5.length && this._triggerArray.push(t4);
            }
            this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();
          }
          static get Default() {
            return Ht;
          }
          static get DefaultType() {
            return Wt;
          }
          static get NAME() {
            return "collapse";
          }
          toggle() {
            this._isShown() ? this.hide() : this.show();
          }
          show() {
            if (this._isTransitioning || this._isShown()) return;
            let t3 = [];
            if (this._config.parent && (t3 = this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t4) => t4 !== this._element).map((t4) => Bt.getOrCreateInstance(t4, { toggle: false }))), t3.length && t3[0]._isTransitioning) return;
            if (N.trigger(this._element, Lt).defaultPrevented) return;
            for (const e4 of t3) e4.hide();
            const e3 = this._getDimension();
            this._element.classList.remove(Pt), this._element.classList.add(jt), this._element.style[e3] = 0, this._addAriaAndCollapsedClass(this._triggerArray, true), this._isTransitioning = true;
            const i4 = `scroll${e3[0].toUpperCase() + e3.slice(1)}`;
            this._queueCallback(() => {
              this._isTransitioning = false, this._element.classList.remove(jt), this._element.classList.add(Pt, Nt), this._element.style[e3] = "", N.trigger(this._element, St);
            }, this._element, true), this._element.style[e3] = `${this._element[i4]}px`;
          }
          hide() {
            if (this._isTransitioning || !this._isShown()) return;
            if (N.trigger(this._element, Dt).defaultPrevented) return;
            const t3 = this._getDimension();
            this._element.style[t3] = `${this._element.getBoundingClientRect()[t3]}px`, d(this._element), this._element.classList.add(jt), this._element.classList.remove(Pt, Nt);
            for (const t4 of this._triggerArray) {
              const e3 = z.getElementFromSelector(t4);
              e3 && !this._isShown(e3) && this._addAriaAndCollapsedClass([t4], false);
            }
            this._isTransitioning = true, this._element.style[t3] = "", this._queueCallback(() => {
              this._isTransitioning = false, this._element.classList.remove(jt), this._element.classList.add(Pt), N.trigger(this._element, $t);
            }, this._element, true);
          }
          _isShown(t3 = this._element) {
            return t3.classList.contains(Nt);
          }
          _configAfterMerge(t3) {
            return t3.toggle = Boolean(t3.toggle), t3.parent = r2(t3.parent), t3;
          }
          _getDimension() {
            return this._element.classList.contains("collapse-horizontal") ? "width" : "height";
          }
          _initializeChildren() {
            if (!this._config.parent) return;
            const t3 = this._getFirstLevelChildren(Ft);
            for (const e3 of t3) {
              const t4 = z.getElementFromSelector(e3);
              t4 && this._addAriaAndCollapsedClass([e3], this._isShown(t4));
            }
          }
          _getFirstLevelChildren(t3) {
            const e3 = z.find(Mt, this._config.parent);
            return z.find(t3, this._config.parent).filter((t4) => !e3.includes(t4));
          }
          _addAriaAndCollapsedClass(t3, e3) {
            if (t3.length) for (const i4 of t3) i4.classList.toggle("collapsed", !e3), i4.setAttribute("aria-expanded", e3);
          }
          static jQueryInterface(t3) {
            const e3 = {};
            return "string" == typeof t3 && /show|hide/.test(t3) && (e3.toggle = false), this.each(function() {
              const i4 = Bt.getOrCreateInstance(this, e3);
              if ("string" == typeof t3) {
                if (void 0 === i4[t3]) throw new TypeError(`No method named "${t3}"`);
                i4[t3]();
              }
            });
          }
        }
        N.on(document, It, Ft, function(t3) {
          ("A" === t3.target.tagName || t3.delegateTarget && "A" === t3.delegateTarget.tagName) && t3.preventDefault();
          for (const t4 of z.getMultipleElementsFromSelector(this)) Bt.getOrCreateInstance(t4, { toggle: false }).toggle();
        }), m(Bt);
        var zt = "top", Rt = "bottom", qt = "right", Vt = "left", Kt = "auto", Qt = [zt, Rt, qt, Vt], Xt = "start", Yt = "end", Ut = "clippingParents", Gt = "viewport", Jt = "popper", Zt = "reference", te = Qt.reduce(function(t3, e3) {
          return t3.concat([e3 + "-" + Xt, e3 + "-" + Yt]);
        }, []), ee = [].concat(Qt, [Kt]).reduce(function(t3, e3) {
          return t3.concat([e3, e3 + "-" + Xt, e3 + "-" + Yt]);
        }, []), ie = "beforeRead", ne = "read", se = "afterRead", oe = "beforeMain", re = "main", ae = "afterMain", le = "beforeWrite", ce = "write", he = "afterWrite", de = [ie, ne, se, oe, re, ae, le, ce, he];
        function ue(t3) {
          return t3 ? (t3.nodeName || "").toLowerCase() : null;
        }
        function fe(t3) {
          if (null == t3) return window;
          if ("[object Window]" !== t3.toString()) {
            var e3 = t3.ownerDocument;
            return e3 && e3.defaultView || window;
          }
          return t3;
        }
        function pe(t3) {
          return t3 instanceof fe(t3).Element || t3 instanceof Element;
        }
        function me(t3) {
          return t3 instanceof fe(t3).HTMLElement || t3 instanceof HTMLElement;
        }
        function ge(t3) {
          return "undefined" != typeof ShadowRoot && (t3 instanceof fe(t3).ShadowRoot || t3 instanceof ShadowRoot);
        }
        const _e = { name: "applyStyles", enabled: true, phase: "write", fn: function(t3) {
          var e3 = t3.state;
          Object.keys(e3.elements).forEach(function(t4) {
            var i4 = e3.styles[t4] || {}, n3 = e3.attributes[t4] || {}, s3 = e3.elements[t4];
            me(s3) && ue(s3) && (Object.assign(s3.style, i4), Object.keys(n3).forEach(function(t5) {
              var e4 = n3[t5];
              false === e4 ? s3.removeAttribute(t5) : s3.setAttribute(t5, true === e4 ? "" : e4);
            }));
          });
        }, effect: function(t3) {
          var e3 = t3.state, i4 = { popper: { position: e3.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
          return Object.assign(e3.elements.popper.style, i4.popper), e3.styles = i4, e3.elements.arrow && Object.assign(e3.elements.arrow.style, i4.arrow), function() {
            Object.keys(e3.elements).forEach(function(t4) {
              var n3 = e3.elements[t4], s3 = e3.attributes[t4] || {}, o3 = Object.keys(e3.styles.hasOwnProperty(t4) ? e3.styles[t4] : i4[t4]).reduce(function(t5, e4) {
                return t5[e4] = "", t5;
              }, {});
              me(n3) && ue(n3) && (Object.assign(n3.style, o3), Object.keys(s3).forEach(function(t5) {
                n3.removeAttribute(t5);
              }));
            });
          };
        }, requires: ["computeStyles"] };
        function be(t3) {
          return t3.split("-")[0];
        }
        var ve = Math.max, ye = Math.min, we = Math.round;
        function Ae() {
          var t3 = navigator.userAgentData;
          return null != t3 && t3.brands && Array.isArray(t3.brands) ? t3.brands.map(function(t4) {
            return t4.brand + "/" + t4.version;
          }).join(" ") : navigator.userAgent;
        }
        function Ee() {
          return !/^((?!chrome|android).)*safari/i.test(Ae());
        }
        function Te(t3, e3, i4) {
          void 0 === e3 && (e3 = false), void 0 === i4 && (i4 = false);
          var n3 = t3.getBoundingClientRect(), s3 = 1, o3 = 1;
          e3 && me(t3) && (s3 = t3.offsetWidth > 0 && we(n3.width) / t3.offsetWidth || 1, o3 = t3.offsetHeight > 0 && we(n3.height) / t3.offsetHeight || 1);
          var r3 = (pe(t3) ? fe(t3) : window).visualViewport, a3 = !Ee() && i4, l2 = (n3.left + (a3 && r3 ? r3.offsetLeft : 0)) / s3, c3 = (n3.top + (a3 && r3 ? r3.offsetTop : 0)) / o3, h2 = n3.width / s3, d2 = n3.height / o3;
          return { width: h2, height: d2, top: c3, right: l2 + h2, bottom: c3 + d2, left: l2, x: l2, y: c3 };
        }
        function Ce(t3) {
          var e3 = Te(t3), i4 = t3.offsetWidth, n3 = t3.offsetHeight;
          return Math.abs(e3.width - i4) <= 1 && (i4 = e3.width), Math.abs(e3.height - n3) <= 1 && (n3 = e3.height), { x: t3.offsetLeft, y: t3.offsetTop, width: i4, height: n3 };
        }
        function Oe(t3, e3) {
          var i4 = e3.getRootNode && e3.getRootNode();
          if (t3.contains(e3)) return true;
          if (i4 && ge(i4)) {
            var n3 = e3;
            do {
              if (n3 && t3.isSameNode(n3)) return true;
              n3 = n3.parentNode || n3.host;
            } while (n3);
          }
          return false;
        }
        function xe(t3) {
          return fe(t3).getComputedStyle(t3);
        }
        function ke(t3) {
          return ["table", "td", "th"].indexOf(ue(t3)) >= 0;
        }
        function Le(t3) {
          return ((pe(t3) ? t3.ownerDocument : t3.document) || window.document).documentElement;
        }
        function Se(t3) {
          return "html" === ue(t3) ? t3 : t3.assignedSlot || t3.parentNode || (ge(t3) ? t3.host : null) || Le(t3);
        }
        function De(t3) {
          return me(t3) && "fixed" !== xe(t3).position ? t3.offsetParent : null;
        }
        function $e(t3) {
          for (var e3 = fe(t3), i4 = De(t3); i4 && ke(i4) && "static" === xe(i4).position; ) i4 = De(i4);
          return i4 && ("html" === ue(i4) || "body" === ue(i4) && "static" === xe(i4).position) ? e3 : i4 || function(t4) {
            var e4 = /firefox/i.test(Ae());
            if (/Trident/i.test(Ae()) && me(t4) && "fixed" === xe(t4).position) return null;
            var i5 = Se(t4);
            for (ge(i5) && (i5 = i5.host); me(i5) && ["html", "body"].indexOf(ue(i5)) < 0; ) {
              var n3 = xe(i5);
              if ("none" !== n3.transform || "none" !== n3.perspective || "paint" === n3.contain || -1 !== ["transform", "perspective"].indexOf(n3.willChange) || e4 && "filter" === n3.willChange || e4 && n3.filter && "none" !== n3.filter) return i5;
              i5 = i5.parentNode;
            }
            return null;
          }(t3) || e3;
        }
        function Ie(t3) {
          return ["top", "bottom"].indexOf(t3) >= 0 ? "x" : "y";
        }
        function Ne(t3, e3, i4) {
          return ve(t3, ye(e3, i4));
        }
        function Pe(t3) {
          return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t3);
        }
        function je(t3, e3) {
          return e3.reduce(function(e4, i4) {
            return e4[i4] = t3, e4;
          }, {});
        }
        const Me = { name: "arrow", enabled: true, phase: "main", fn: function(t3) {
          var e3, i4 = t3.state, n3 = t3.name, s3 = t3.options, o3 = i4.elements.arrow, r3 = i4.modifiersData.popperOffsets, a3 = be(i4.placement), l2 = Ie(a3), c3 = [Vt, qt].indexOf(a3) >= 0 ? "height" : "width";
          if (o3 && r3) {
            var h2 = function(t4, e4) {
              return Pe("number" != typeof (t4 = "function" == typeof t4 ? t4(Object.assign({}, e4.rects, { placement: e4.placement })) : t4) ? t4 : je(t4, Qt));
            }(s3.padding, i4), d2 = Ce(o3), u3 = "y" === l2 ? zt : Vt, f3 = "y" === l2 ? Rt : qt, p2 = i4.rects.reference[c3] + i4.rects.reference[l2] - r3[l2] - i4.rects.popper[c3], m2 = r3[l2] - i4.rects.reference[l2], g2 = $e(o3), _2 = g2 ? "y" === l2 ? g2.clientHeight || 0 : g2.clientWidth || 0 : 0, b2 = p2 / 2 - m2 / 2, v2 = h2[u3], y2 = _2 - d2[c3] - h2[f3], w2 = _2 / 2 - d2[c3] / 2 + b2, A2 = Ne(v2, w2, y2), E2 = l2;
            i4.modifiersData[n3] = ((e3 = {})[E2] = A2, e3.centerOffset = A2 - w2, e3);
          }
        }, effect: function(t3) {
          var e3 = t3.state, i4 = t3.options.element, n3 = void 0 === i4 ? "[data-popper-arrow]" : i4;
          null != n3 && ("string" != typeof n3 || (n3 = e3.elements.popper.querySelector(n3))) && Oe(e3.elements.popper, n3) && (e3.elements.arrow = n3);
        }, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
        function Fe(t3) {
          return t3.split("-")[1];
        }
        var He = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
        function We(t3) {
          var e3, i4 = t3.popper, n3 = t3.popperRect, s3 = t3.placement, o3 = t3.variation, r3 = t3.offsets, a3 = t3.position, l2 = t3.gpuAcceleration, c3 = t3.adaptive, h2 = t3.roundOffsets, d2 = t3.isFixed, u3 = r3.x, f3 = void 0 === u3 ? 0 : u3, p2 = r3.y, m2 = void 0 === p2 ? 0 : p2, g2 = "function" == typeof h2 ? h2({ x: f3, y: m2 }) : { x: f3, y: m2 };
          f3 = g2.x, m2 = g2.y;
          var _2 = r3.hasOwnProperty("x"), b2 = r3.hasOwnProperty("y"), v2 = Vt, y2 = zt, w2 = window;
          if (c3) {
            var A2 = $e(i4), E2 = "clientHeight", T2 = "clientWidth";
            A2 === fe(i4) && "static" !== xe(A2 = Le(i4)).position && "absolute" === a3 && (E2 = "scrollHeight", T2 = "scrollWidth"), (s3 === zt || (s3 === Vt || s3 === qt) && o3 === Yt) && (y2 = Rt, m2 -= (d2 && A2 === w2 && w2.visualViewport ? w2.visualViewport.height : A2[E2]) - n3.height, m2 *= l2 ? 1 : -1), s3 !== Vt && (s3 !== zt && s3 !== Rt || o3 !== Yt) || (v2 = qt, f3 -= (d2 && A2 === w2 && w2.visualViewport ? w2.visualViewport.width : A2[T2]) - n3.width, f3 *= l2 ? 1 : -1);
          }
          var C2, O2 = Object.assign({ position: a3 }, c3 && He), x2 = true === h2 ? function(t4, e4) {
            var i5 = t4.x, n4 = t4.y, s4 = e4.devicePixelRatio || 1;
            return { x: we(i5 * s4) / s4 || 0, y: we(n4 * s4) / s4 || 0 };
          }({ x: f3, y: m2 }, fe(i4)) : { x: f3, y: m2 };
          return f3 = x2.x, m2 = x2.y, l2 ? Object.assign({}, O2, ((C2 = {})[y2] = b2 ? "0" : "", C2[v2] = _2 ? "0" : "", C2.transform = (w2.devicePixelRatio || 1) <= 1 ? "translate(" + f3 + "px, " + m2 + "px)" : "translate3d(" + f3 + "px, " + m2 + "px, 0)", C2)) : Object.assign({}, O2, ((e3 = {})[y2] = b2 ? m2 + "px" : "", e3[v2] = _2 ? f3 + "px" : "", e3.transform = "", e3));
        }
        const Be = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: function(t3) {
          var e3 = t3.state, i4 = t3.options, n3 = i4.gpuAcceleration, s3 = void 0 === n3 || n3, o3 = i4.adaptive, r3 = void 0 === o3 || o3, a3 = i4.roundOffsets, l2 = void 0 === a3 || a3, c3 = { placement: be(e3.placement), variation: Fe(e3.placement), popper: e3.elements.popper, popperRect: e3.rects.popper, gpuAcceleration: s3, isFixed: "fixed" === e3.options.strategy };
          null != e3.modifiersData.popperOffsets && (e3.styles.popper = Object.assign({}, e3.styles.popper, We(Object.assign({}, c3, { offsets: e3.modifiersData.popperOffsets, position: e3.options.strategy, adaptive: r3, roundOffsets: l2 })))), null != e3.modifiersData.arrow && (e3.styles.arrow = Object.assign({}, e3.styles.arrow, We(Object.assign({}, c3, { offsets: e3.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: l2 })))), e3.attributes.popper = Object.assign({}, e3.attributes.popper, { "data-popper-placement": e3.placement });
        }, data: {} };
        var ze = { passive: true };
        const Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
        }, effect: function(t3) {
          var e3 = t3.state, i4 = t3.instance, n3 = t3.options, s3 = n3.scroll, o3 = void 0 === s3 || s3, r3 = n3.resize, a3 = void 0 === r3 || r3, l2 = fe(e3.elements.popper), c3 = [].concat(e3.scrollParents.reference, e3.scrollParents.popper);
          return o3 && c3.forEach(function(t4) {
            t4.addEventListener("scroll", i4.update, ze);
          }), a3 && l2.addEventListener("resize", i4.update, ze), function() {
            o3 && c3.forEach(function(t4) {
              t4.removeEventListener("scroll", i4.update, ze);
            }), a3 && l2.removeEventListener("resize", i4.update, ze);
          };
        }, data: {} };
        var qe = { left: "right", right: "left", bottom: "top", top: "bottom" };
        function Ve(t3) {
          return t3.replace(/left|right|bottom|top/g, function(t4) {
            return qe[t4];
          });
        }
        var Ke = { start: "end", end: "start" };
        function Qe(t3) {
          return t3.replace(/start|end/g, function(t4) {
            return Ke[t4];
          });
        }
        function Xe(t3) {
          var e3 = fe(t3);
          return { scrollLeft: e3.pageXOffset, scrollTop: e3.pageYOffset };
        }
        function Ye(t3) {
          return Te(Le(t3)).left + Xe(t3).scrollLeft;
        }
        function Ue(t3) {
          var e3 = xe(t3), i4 = e3.overflow, n3 = e3.overflowX, s3 = e3.overflowY;
          return /auto|scroll|overlay|hidden/.test(i4 + s3 + n3);
        }
        function Ge(t3) {
          return ["html", "body", "#document"].indexOf(ue(t3)) >= 0 ? t3.ownerDocument.body : me(t3) && Ue(t3) ? t3 : Ge(Se(t3));
        }
        function Je(t3, e3) {
          var i4;
          void 0 === e3 && (e3 = []);
          var n3 = Ge(t3), s3 = n3 === (null == (i4 = t3.ownerDocument) ? void 0 : i4.body), o3 = fe(n3), r3 = s3 ? [o3].concat(o3.visualViewport || [], Ue(n3) ? n3 : []) : n3, a3 = e3.concat(r3);
          return s3 ? a3 : a3.concat(Je(Se(r3)));
        }
        function Ze(t3) {
          return Object.assign({}, t3, { left: t3.x, top: t3.y, right: t3.x + t3.width, bottom: t3.y + t3.height });
        }
        function ti(t3, e3, i4) {
          return e3 === Gt ? Ze(function(t4, e4) {
            var i5 = fe(t4), n3 = Le(t4), s3 = i5.visualViewport, o3 = n3.clientWidth, r3 = n3.clientHeight, a3 = 0, l2 = 0;
            if (s3) {
              o3 = s3.width, r3 = s3.height;
              var c3 = Ee();
              (c3 || !c3 && "fixed" === e4) && (a3 = s3.offsetLeft, l2 = s3.offsetTop);
            }
            return { width: o3, height: r3, x: a3 + Ye(t4), y: l2 };
          }(t3, i4)) : pe(e3) ? function(t4, e4) {
            var i5 = Te(t4, false, "fixed" === e4);
            return i5.top = i5.top + t4.clientTop, i5.left = i5.left + t4.clientLeft, i5.bottom = i5.top + t4.clientHeight, i5.right = i5.left + t4.clientWidth, i5.width = t4.clientWidth, i5.height = t4.clientHeight, i5.x = i5.left, i5.y = i5.top, i5;
          }(e3, i4) : Ze(function(t4) {
            var e4, i5 = Le(t4), n3 = Xe(t4), s3 = null == (e4 = t4.ownerDocument) ? void 0 : e4.body, o3 = ve(i5.scrollWidth, i5.clientWidth, s3 ? s3.scrollWidth : 0, s3 ? s3.clientWidth : 0), r3 = ve(i5.scrollHeight, i5.clientHeight, s3 ? s3.scrollHeight : 0, s3 ? s3.clientHeight : 0), a3 = -n3.scrollLeft + Ye(t4), l2 = -n3.scrollTop;
            return "rtl" === xe(s3 || i5).direction && (a3 += ve(i5.clientWidth, s3 ? s3.clientWidth : 0) - o3), { width: o3, height: r3, x: a3, y: l2 };
          }(Le(t3)));
        }
        function ei(t3) {
          var e3, i4 = t3.reference, n3 = t3.element, s3 = t3.placement, o3 = s3 ? be(s3) : null, r3 = s3 ? Fe(s3) : null, a3 = i4.x + i4.width / 2 - n3.width / 2, l2 = i4.y + i4.height / 2 - n3.height / 2;
          switch (o3) {
            case zt:
              e3 = { x: a3, y: i4.y - n3.height };
              break;
            case Rt:
              e3 = { x: a3, y: i4.y + i4.height };
              break;
            case qt:
              e3 = { x: i4.x + i4.width, y: l2 };
              break;
            case Vt:
              e3 = { x: i4.x - n3.width, y: l2 };
              break;
            default:
              e3 = { x: i4.x, y: i4.y };
          }
          var c3 = o3 ? Ie(o3) : null;
          if (null != c3) {
            var h2 = "y" === c3 ? "height" : "width";
            switch (r3) {
              case Xt:
                e3[c3] = e3[c3] - (i4[h2] / 2 - n3[h2] / 2);
                break;
              case Yt:
                e3[c3] = e3[c3] + (i4[h2] / 2 - n3[h2] / 2);
            }
          }
          return e3;
        }
        function ii(t3, e3) {
          void 0 === e3 && (e3 = {});
          var i4 = e3, n3 = i4.placement, s3 = void 0 === n3 ? t3.placement : n3, o3 = i4.strategy, r3 = void 0 === o3 ? t3.strategy : o3, a3 = i4.boundary, l2 = void 0 === a3 ? Ut : a3, c3 = i4.rootBoundary, h2 = void 0 === c3 ? Gt : c3, d2 = i4.elementContext, u3 = void 0 === d2 ? Jt : d2, f3 = i4.altBoundary, p2 = void 0 !== f3 && f3, m2 = i4.padding, g2 = void 0 === m2 ? 0 : m2, _2 = Pe("number" != typeof g2 ? g2 : je(g2, Qt)), b2 = u3 === Jt ? Zt : Jt, v2 = t3.rects.popper, y2 = t3.elements[p2 ? b2 : u3], w2 = function(t4, e4, i5, n4) {
            var s4 = "clippingParents" === e4 ? function(t5) {
              var e5 = Je(Se(t5)), i6 = ["absolute", "fixed"].indexOf(xe(t5).position) >= 0 && me(t5) ? $e(t5) : t5;
              return pe(i6) ? e5.filter(function(t6) {
                return pe(t6) && Oe(t6, i6) && "body" !== ue(t6);
              }) : [];
            }(t4) : [].concat(e4), o4 = [].concat(s4, [i5]), r4 = o4[0], a4 = o4.reduce(function(e5, i6) {
              var s5 = ti(t4, i6, n4);
              return e5.top = ve(s5.top, e5.top), e5.right = ye(s5.right, e5.right), e5.bottom = ye(s5.bottom, e5.bottom), e5.left = ve(s5.left, e5.left), e5;
            }, ti(t4, r4, n4));
            return a4.width = a4.right - a4.left, a4.height = a4.bottom - a4.top, a4.x = a4.left, a4.y = a4.top, a4;
          }(pe(y2) ? y2 : y2.contextElement || Le(t3.elements.popper), l2, h2, r3), A2 = Te(t3.elements.reference), E2 = ei({ reference: A2, element: v2, strategy: "absolute", placement: s3 }), T2 = Ze(Object.assign({}, v2, E2)), C2 = u3 === Jt ? T2 : A2, O2 = { top: w2.top - C2.top + _2.top, bottom: C2.bottom - w2.bottom + _2.bottom, left: w2.left - C2.left + _2.left, right: C2.right - w2.right + _2.right }, x2 = t3.modifiersData.offset;
          if (u3 === Jt && x2) {
            var k2 = x2[s3];
            Object.keys(O2).forEach(function(t4) {
              var e4 = [qt, Rt].indexOf(t4) >= 0 ? 1 : -1, i5 = [zt, Rt].indexOf(t4) >= 0 ? "y" : "x";
              O2[t4] += k2[i5] * e4;
            });
          }
          return O2;
        }
        function ni(t3, e3) {
          void 0 === e3 && (e3 = {});
          var i4 = e3, n3 = i4.placement, s3 = i4.boundary, o3 = i4.rootBoundary, r3 = i4.padding, a3 = i4.flipVariations, l2 = i4.allowedAutoPlacements, c3 = void 0 === l2 ? ee : l2, h2 = Fe(n3), d2 = h2 ? a3 ? te : te.filter(function(t4) {
            return Fe(t4) === h2;
          }) : Qt, u3 = d2.filter(function(t4) {
            return c3.indexOf(t4) >= 0;
          });
          0 === u3.length && (u3 = d2);
          var f3 = u3.reduce(function(e4, i5) {
            return e4[i5] = ii(t3, { placement: i5, boundary: s3, rootBoundary: o3, padding: r3 })[be(i5)], e4;
          }, {});
          return Object.keys(f3).sort(function(t4, e4) {
            return f3[t4] - f3[e4];
          });
        }
        const si = { name: "flip", enabled: true, phase: "main", fn: function(t3) {
          var e3 = t3.state, i4 = t3.options, n3 = t3.name;
          if (!e3.modifiersData[n3]._skip) {
            for (var s3 = i4.mainAxis, o3 = void 0 === s3 || s3, r3 = i4.altAxis, a3 = void 0 === r3 || r3, l2 = i4.fallbackPlacements, c3 = i4.padding, h2 = i4.boundary, d2 = i4.rootBoundary, u3 = i4.altBoundary, f3 = i4.flipVariations, p2 = void 0 === f3 || f3, m2 = i4.allowedAutoPlacements, g2 = e3.options.placement, _2 = be(g2), b2 = l2 || (_2 !== g2 && p2 ? function(t4) {
              if (be(t4) === Kt) return [];
              var e4 = Ve(t4);
              return [Qe(t4), e4, Qe(e4)];
            }(g2) : [Ve(g2)]), v2 = [g2].concat(b2).reduce(function(t4, i5) {
              return t4.concat(be(i5) === Kt ? ni(e3, { placement: i5, boundary: h2, rootBoundary: d2, padding: c3, flipVariations: p2, allowedAutoPlacements: m2 }) : i5);
            }, []), y2 = e3.rects.reference, w2 = e3.rects.popper, A2 = /* @__PURE__ */ new Map(), E2 = true, T2 = v2[0], C2 = 0; C2 < v2.length; C2++) {
              var O2 = v2[C2], x2 = be(O2), k2 = Fe(O2) === Xt, L2 = [zt, Rt].indexOf(x2) >= 0, S2 = L2 ? "width" : "height", D2 = ii(e3, { placement: O2, boundary: h2, rootBoundary: d2, altBoundary: u3, padding: c3 }), $2 = L2 ? k2 ? qt : Vt : k2 ? Rt : zt;
              y2[S2] > w2[S2] && ($2 = Ve($2));
              var I2 = Ve($2), N2 = [];
              if (o3 && N2.push(D2[x2] <= 0), a3 && N2.push(D2[$2] <= 0, D2[I2] <= 0), N2.every(function(t4) {
                return t4;
              })) {
                T2 = O2, E2 = false;
                break;
              }
              A2.set(O2, N2);
            }
            if (E2) for (var P2 = function(t4) {
              var e4 = v2.find(function(e5) {
                var i5 = A2.get(e5);
                if (i5) return i5.slice(0, t4).every(function(t5) {
                  return t5;
                });
              });
              if (e4) return T2 = e4, "break";
            }, j2 = p2 ? 3 : 1; j2 > 0 && "break" !== P2(j2); j2--) ;
            e3.placement !== T2 && (e3.modifiersData[n3]._skip = true, e3.placement = T2, e3.reset = true);
          }
        }, requiresIfExists: ["offset"], data: { _skip: false } };
        function oi(t3, e3, i4) {
          return void 0 === i4 && (i4 = { x: 0, y: 0 }), { top: t3.top - e3.height - i4.y, right: t3.right - e3.width + i4.x, bottom: t3.bottom - e3.height + i4.y, left: t3.left - e3.width - i4.x };
        }
        function ri(t3) {
          return [zt, qt, Rt, Vt].some(function(e3) {
            return t3[e3] >= 0;
          });
        }
        const ai = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: function(t3) {
          var e3 = t3.state, i4 = t3.name, n3 = e3.rects.reference, s3 = e3.rects.popper, o3 = e3.modifiersData.preventOverflow, r3 = ii(e3, { elementContext: "reference" }), a3 = ii(e3, { altBoundary: true }), l2 = oi(r3, n3), c3 = oi(a3, s3, o3), h2 = ri(l2), d2 = ri(c3);
          e3.modifiersData[i4] = { referenceClippingOffsets: l2, popperEscapeOffsets: c3, isReferenceHidden: h2, hasPopperEscaped: d2 }, e3.attributes.popper = Object.assign({}, e3.attributes.popper, { "data-popper-reference-hidden": h2, "data-popper-escaped": d2 });
        } }, li = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: function(t3) {
          var e3 = t3.state, i4 = t3.options, n3 = t3.name, s3 = i4.offset, o3 = void 0 === s3 ? [0, 0] : s3, r3 = ee.reduce(function(t4, i5) {
            return t4[i5] = function(t5, e4, i6) {
              var n4 = be(t5), s4 = [Vt, zt].indexOf(n4) >= 0 ? -1 : 1, o4 = "function" == typeof i6 ? i6(Object.assign({}, e4, { placement: t5 })) : i6, r4 = o4[0], a4 = o4[1];
              return r4 = r4 || 0, a4 = (a4 || 0) * s4, [Vt, qt].indexOf(n4) >= 0 ? { x: a4, y: r4 } : { x: r4, y: a4 };
            }(i5, e3.rects, o3), t4;
          }, {}), a3 = r3[e3.placement], l2 = a3.x, c3 = a3.y;
          null != e3.modifiersData.popperOffsets && (e3.modifiersData.popperOffsets.x += l2, e3.modifiersData.popperOffsets.y += c3), e3.modifiersData[n3] = r3;
        } }, ci = { name: "popperOffsets", enabled: true, phase: "read", fn: function(t3) {
          var e3 = t3.state, i4 = t3.name;
          e3.modifiersData[i4] = ei({ reference: e3.rects.reference, element: e3.rects.popper, strategy: "absolute", placement: e3.placement });
        }, data: {} }, hi = { name: "preventOverflow", enabled: true, phase: "main", fn: function(t3) {
          var e3 = t3.state, i4 = t3.options, n3 = t3.name, s3 = i4.mainAxis, o3 = void 0 === s3 || s3, r3 = i4.altAxis, a3 = void 0 !== r3 && r3, l2 = i4.boundary, c3 = i4.rootBoundary, h2 = i4.altBoundary, d2 = i4.padding, u3 = i4.tether, f3 = void 0 === u3 || u3, p2 = i4.tetherOffset, m2 = void 0 === p2 ? 0 : p2, g2 = ii(e3, { boundary: l2, rootBoundary: c3, padding: d2, altBoundary: h2 }), _2 = be(e3.placement), b2 = Fe(e3.placement), v2 = !b2, y2 = Ie(_2), w2 = "x" === y2 ? "y" : "x", A2 = e3.modifiersData.popperOffsets, E2 = e3.rects.reference, T2 = e3.rects.popper, C2 = "function" == typeof m2 ? m2(Object.assign({}, e3.rects, { placement: e3.placement })) : m2, O2 = "number" == typeof C2 ? { mainAxis: C2, altAxis: C2 } : Object.assign({ mainAxis: 0, altAxis: 0 }, C2), x2 = e3.modifiersData.offset ? e3.modifiersData.offset[e3.placement] : null, k2 = { x: 0, y: 0 };
          if (A2) {
            if (o3) {
              var L2, S2 = "y" === y2 ? zt : Vt, D2 = "y" === y2 ? Rt : qt, $2 = "y" === y2 ? "height" : "width", I2 = A2[y2], N2 = I2 + g2[S2], P2 = I2 - g2[D2], j2 = f3 ? -T2[$2] / 2 : 0, M2 = b2 === Xt ? E2[$2] : T2[$2], F2 = b2 === Xt ? -T2[$2] : -E2[$2], H2 = e3.elements.arrow, W2 = f3 && H2 ? Ce(H2) : { width: 0, height: 0 }, B2 = e3.modifiersData["arrow#persistent"] ? e3.modifiersData["arrow#persistent"].padding : { top: 0, right: 0, bottom: 0, left: 0 }, z2 = B2[S2], R2 = B2[D2], q2 = Ne(0, E2[$2], W2[$2]), V2 = v2 ? E2[$2] / 2 - j2 - q2 - z2 - O2.mainAxis : M2 - q2 - z2 - O2.mainAxis, K2 = v2 ? -E2[$2] / 2 + j2 + q2 + R2 + O2.mainAxis : F2 + q2 + R2 + O2.mainAxis, Q2 = e3.elements.arrow && $e(e3.elements.arrow), X2 = Q2 ? "y" === y2 ? Q2.clientTop || 0 : Q2.clientLeft || 0 : 0, Y2 = null != (L2 = null == x2 ? void 0 : x2[y2]) ? L2 : 0, U2 = I2 + K2 - Y2, G2 = Ne(f3 ? ye(N2, I2 + V2 - Y2 - X2) : N2, I2, f3 ? ve(P2, U2) : P2);
              A2[y2] = G2, k2[y2] = G2 - I2;
            }
            if (a3) {
              var J2, Z2 = "x" === y2 ? zt : Vt, tt2 = "x" === y2 ? Rt : qt, et2 = A2[w2], it2 = "y" === w2 ? "height" : "width", nt2 = et2 + g2[Z2], st2 = et2 - g2[tt2], ot2 = -1 !== [zt, Vt].indexOf(_2), rt2 = null != (J2 = null == x2 ? void 0 : x2[w2]) ? J2 : 0, at2 = ot2 ? nt2 : et2 - E2[it2] - T2[it2] - rt2 + O2.altAxis, lt2 = ot2 ? et2 + E2[it2] + T2[it2] - rt2 - O2.altAxis : st2, ct2 = f3 && ot2 ? function(t4, e4, i5) {
                var n4 = Ne(t4, e4, i5);
                return n4 > i5 ? i5 : n4;
              }(at2, et2, lt2) : Ne(f3 ? at2 : nt2, et2, f3 ? lt2 : st2);
              A2[w2] = ct2, k2[w2] = ct2 - et2;
            }
            e3.modifiersData[n3] = k2;
          }
        }, requiresIfExists: ["offset"] };
        function di(t3, e3, i4) {
          void 0 === i4 && (i4 = false);
          var n3, s3, o3 = me(e3), r3 = me(e3) && function(t4) {
            var e4 = t4.getBoundingClientRect(), i5 = we(e4.width) / t4.offsetWidth || 1, n4 = we(e4.height) / t4.offsetHeight || 1;
            return 1 !== i5 || 1 !== n4;
          }(e3), a3 = Le(e3), l2 = Te(t3, r3, i4), c3 = { scrollLeft: 0, scrollTop: 0 }, h2 = { x: 0, y: 0 };
          return (o3 || !o3 && !i4) && (("body" !== ue(e3) || Ue(a3)) && (c3 = (n3 = e3) !== fe(n3) && me(n3) ? { scrollLeft: (s3 = n3).scrollLeft, scrollTop: s3.scrollTop } : Xe(n3)), me(e3) ? ((h2 = Te(e3, true)).x += e3.clientLeft, h2.y += e3.clientTop) : a3 && (h2.x = Ye(a3))), { x: l2.left + c3.scrollLeft - h2.x, y: l2.top + c3.scrollTop - h2.y, width: l2.width, height: l2.height };
        }
        function ui(t3) {
          var e3 = /* @__PURE__ */ new Map(), i4 = /* @__PURE__ */ new Set(), n3 = [];
          function s3(t4) {
            i4.add(t4.name), [].concat(t4.requires || [], t4.requiresIfExists || []).forEach(function(t5) {
              if (!i4.has(t5)) {
                var n4 = e3.get(t5);
                n4 && s3(n4);
              }
            }), n3.push(t4);
          }
          return t3.forEach(function(t4) {
            e3.set(t4.name, t4);
          }), t3.forEach(function(t4) {
            i4.has(t4.name) || s3(t4);
          }), n3;
        }
        var fi = { placement: "bottom", modifiers: [], strategy: "absolute" };
        function pi() {
          for (var t3 = arguments.length, e3 = new Array(t3), i4 = 0; i4 < t3; i4++) e3[i4] = arguments[i4];
          return !e3.some(function(t4) {
            return !(t4 && "function" == typeof t4.getBoundingClientRect);
          });
        }
        function mi(t3) {
          void 0 === t3 && (t3 = {});
          var e3 = t3, i4 = e3.defaultModifiers, n3 = void 0 === i4 ? [] : i4, s3 = e3.defaultOptions, o3 = void 0 === s3 ? fi : s3;
          return function(t4, e4, i5) {
            void 0 === i5 && (i5 = o3);
            var s4, r3, a3 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, fi, o3), modifiersData: {}, elements: { reference: t4, popper: e4 }, attributes: {}, styles: {} }, l2 = [], c3 = false, h2 = { state: a3, setOptions: function(i6) {
              var s5 = "function" == typeof i6 ? i6(a3.options) : i6;
              d2(), a3.options = Object.assign({}, o3, a3.options, s5), a3.scrollParents = { reference: pe(t4) ? Je(t4) : t4.contextElement ? Je(t4.contextElement) : [], popper: Je(e4) };
              var r4, c4, u3 = function(t5) {
                var e5 = ui(t5);
                return de.reduce(function(t6, i7) {
                  return t6.concat(e5.filter(function(t7) {
                    return t7.phase === i7;
                  }));
                }, []);
              }((r4 = [].concat(n3, a3.options.modifiers), c4 = r4.reduce(function(t5, e5) {
                var i7 = t5[e5.name];
                return t5[e5.name] = i7 ? Object.assign({}, i7, e5, { options: Object.assign({}, i7.options, e5.options), data: Object.assign({}, i7.data, e5.data) }) : e5, t5;
              }, {}), Object.keys(c4).map(function(t5) {
                return c4[t5];
              })));
              return a3.orderedModifiers = u3.filter(function(t5) {
                return t5.enabled;
              }), a3.orderedModifiers.forEach(function(t5) {
                var e5 = t5.name, i7 = t5.options, n4 = void 0 === i7 ? {} : i7, s6 = t5.effect;
                if ("function" == typeof s6) {
                  var o4 = s6({ state: a3, name: e5, instance: h2, options: n4 });
                  l2.push(o4 || function() {
                  });
                }
              }), h2.update();
            }, forceUpdate: function() {
              if (!c3) {
                var t5 = a3.elements, e5 = t5.reference, i6 = t5.popper;
                if (pi(e5, i6)) {
                  a3.rects = { reference: di(e5, $e(i6), "fixed" === a3.options.strategy), popper: Ce(i6) }, a3.reset = false, a3.placement = a3.options.placement, a3.orderedModifiers.forEach(function(t6) {
                    return a3.modifiersData[t6.name] = Object.assign({}, t6.data);
                  });
                  for (var n4 = 0; n4 < a3.orderedModifiers.length; n4++) if (true !== a3.reset) {
                    var s5 = a3.orderedModifiers[n4], o4 = s5.fn, r4 = s5.options, l3 = void 0 === r4 ? {} : r4, d3 = s5.name;
                    "function" == typeof o4 && (a3 = o4({ state: a3, options: l3, name: d3, instance: h2 }) || a3);
                  } else a3.reset = false, n4 = -1;
                }
              }
            }, update: (s4 = function() {
              return new Promise(function(t5) {
                h2.forceUpdate(), t5(a3);
              });
            }, function() {
              return r3 || (r3 = new Promise(function(t5) {
                Promise.resolve().then(function() {
                  r3 = void 0, t5(s4());
                });
              })), r3;
            }), destroy: function() {
              d2(), c3 = true;
            } };
            if (!pi(t4, e4)) return h2;
            function d2() {
              l2.forEach(function(t5) {
                return t5();
              }), l2 = [];
            }
            return h2.setOptions(i5).then(function(t5) {
              !c3 && i5.onFirstUpdate && i5.onFirstUpdate(t5);
            }), h2;
          };
        }
        var gi = mi(), _i = mi({ defaultModifiers: [Re, ci, Be, _e] }), bi = mi({ defaultModifiers: [Re, ci, Be, _e, li, si, hi, Me, ai] });
        const vi = Object.freeze(Object.defineProperty({ __proto__: null, afterMain: ae, afterRead: se, afterWrite: he, applyStyles: _e, arrow: Me, auto: Kt, basePlacements: Qt, beforeMain: oe, beforeRead: ie, beforeWrite: le, bottom: Rt, clippingParents: Ut, computeStyles: Be, createPopper: bi, createPopperBase: gi, createPopperLite: _i, detectOverflow: ii, end: Yt, eventListeners: Re, flip: si, hide: ai, left: Vt, main: re, modifierPhases: de, offset: li, placements: ee, popper: Jt, popperGenerator: mi, popperOffsets: ci, preventOverflow: hi, read: ne, reference: Zt, right: qt, start: Xt, top: zt, variationPlacements: te, viewport: Gt, write: ce }, Symbol.toStringTag, { value: "Module" })), yi = "dropdown", wi = ".bs.dropdown", Ai = ".data-api", Ei = "ArrowUp", Ti = "ArrowDown", Ci = `hide${wi}`, Oi = `hidden${wi}`, xi = `show${wi}`, ki = `shown${wi}`, Li = `click${wi}${Ai}`, Si = `keydown${wi}${Ai}`, Di = `keyup${wi}${Ai}`, $i = "show", Ii = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)', Ni = `${Ii}.${$i}`, Pi = ".dropdown-menu", ji = p() ? "top-end" : "top-start", Mi = p() ? "top-start" : "top-end", Fi = p() ? "bottom-end" : "bottom-start", Hi = p() ? "bottom-start" : "bottom-end", Wi = p() ? "left-start" : "right-start", Bi = p() ? "right-start" : "left-start", zi = { autoClose: true, boundary: "clippingParents", display: "dynamic", offset: [0, 2], popperConfig: null, reference: "toggle" }, Ri = { autoClose: "(boolean|string)", boundary: "(string|element)", display: "string", offset: "(array|string|function)", popperConfig: "(null|object|function)", reference: "(string|element|object)" };
        class qi extends W {
          constructor(t3, e3) {
            super(t3, e3), this._popper = null, this._parent = this._element.parentNode, this._menu = z.next(this._element, Pi)[0] || z.prev(this._element, Pi)[0] || z.findOne(Pi, this._parent), this._inNavbar = this._detectNavbar();
          }
          static get Default() {
            return zi;
          }
          static get DefaultType() {
            return Ri;
          }
          static get NAME() {
            return yi;
          }
          toggle() {
            return this._isShown() ? this.hide() : this.show();
          }
          show() {
            if (l(this._element) || this._isShown()) return;
            const t3 = { relatedTarget: this._element };
            if (!N.trigger(this._element, xi, t3).defaultPrevented) {
              if (this._createPopper(), "ontouchstart" in document.documentElement && !this._parent.closest(".navbar-nav")) for (const t4 of [].concat(...document.body.children)) N.on(t4, "mouseover", h);
              this._element.focus(), this._element.setAttribute("aria-expanded", true), this._menu.classList.add($i), this._element.classList.add($i), N.trigger(this._element, ki, t3);
            }
          }
          hide() {
            if (l(this._element) || !this._isShown()) return;
            const t3 = { relatedTarget: this._element };
            this._completeHide(t3);
          }
          dispose() {
            this._popper && this._popper.destroy(), super.dispose();
          }
          update() {
            this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();
          }
          _completeHide(t3) {
            if (!N.trigger(this._element, Ci, t3).defaultPrevented) {
              if ("ontouchstart" in document.documentElement) for (const t4 of [].concat(...document.body.children)) N.off(t4, "mouseover", h);
              this._popper && this._popper.destroy(), this._menu.classList.remove($i), this._element.classList.remove($i), this._element.setAttribute("aria-expanded", "false"), F.removeDataAttribute(this._menu, "popper"), N.trigger(this._element, Oi, t3);
            }
          }
          _getConfig(t3) {
            if ("object" == typeof (t3 = super._getConfig(t3)).reference && !o2(t3.reference) && "function" != typeof t3.reference.getBoundingClientRect) throw new TypeError(`${yi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
            return t3;
          }
          _createPopper() {
            if (void 0 === vi) throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
            let t3 = this._element;
            "parent" === this._config.reference ? t3 = this._parent : o2(this._config.reference) ? t3 = r2(this._config.reference) : "object" == typeof this._config.reference && (t3 = this._config.reference);
            const e3 = this._getPopperConfig();
            this._popper = bi(t3, this._menu, e3);
          }
          _isShown() {
            return this._menu.classList.contains($i);
          }
          _getPlacement() {
            const t3 = this._parent;
            if (t3.classList.contains("dropend")) return Wi;
            if (t3.classList.contains("dropstart")) return Bi;
            if (t3.classList.contains("dropup-center")) return "top";
            if (t3.classList.contains("dropdown-center")) return "bottom";
            const e3 = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();
            return t3.classList.contains("dropup") ? e3 ? Mi : ji : e3 ? Hi : Fi;
          }
          _detectNavbar() {
            return null !== this._element.closest(".navbar");
          }
          _getOffset() {
            const { offset: t3 } = this._config;
            return "string" == typeof t3 ? t3.split(",").map((t4) => Number.parseInt(t4, 10)) : "function" == typeof t3 ? (e3) => t3(e3, this._element) : t3;
          }
          _getPopperConfig() {
            const t3 = { placement: this._getPlacement(), modifiers: [{ name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "offset", options: { offset: this._getOffset() } }] };
            return (this._inNavbar || "static" === this._config.display) && (F.setDataAttribute(this._menu, "popper", "static"), t3.modifiers = [{ name: "applyStyles", enabled: false }]), __spreadValues(__spreadValues({}, t3), g(this._config.popperConfig, [t3]));
          }
          _selectMenuItem({ key: t3, target: e3 }) {
            const i4 = z.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter((t4) => a2(t4));
            i4.length && b(i4, e3, t3 === Ti, !i4.includes(e3)).focus();
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = qi.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3]) throw new TypeError(`No method named "${t3}"`);
                e3[t3]();
              }
            });
          }
          static clearMenus(t3) {
            if (2 === t3.button || "keyup" === t3.type && "Tab" !== t3.key) return;
            const e3 = z.find(Ni);
            for (const i4 of e3) {
              const e4 = qi.getInstance(i4);
              if (!e4 || false === e4._config.autoClose) continue;
              const n3 = t3.composedPath(), s3 = n3.includes(e4._menu);
              if (n3.includes(e4._element) || "inside" === e4._config.autoClose && !s3 || "outside" === e4._config.autoClose && s3) continue;
              if (e4._menu.contains(t3.target) && ("keyup" === t3.type && "Tab" === t3.key || /input|select|option|textarea|form/i.test(t3.target.tagName))) continue;
              const o3 = { relatedTarget: e4._element };
              "click" === t3.type && (o3.clickEvent = t3), e4._completeHide(o3);
            }
          }
          static dataApiKeydownHandler(t3) {
            const e3 = /input|textarea/i.test(t3.target.tagName), i4 = "Escape" === t3.key, n3 = [Ei, Ti].includes(t3.key);
            if (!n3 && !i4) return;
            if (e3 && !i4) return;
            t3.preventDefault();
            const s3 = this.matches(Ii) ? this : z.prev(this, Ii)[0] || z.next(this, Ii)[0] || z.findOne(Ii, t3.delegateTarget.parentNode), o3 = qi.getOrCreateInstance(s3);
            if (n3) return t3.stopPropagation(), o3.show(), void o3._selectMenuItem(t3);
            o3._isShown() && (t3.stopPropagation(), o3.hide(), s3.focus());
          }
        }
        N.on(document, Si, Ii, qi.dataApiKeydownHandler), N.on(document, Si, Pi, qi.dataApiKeydownHandler), N.on(document, Li, qi.clearMenus), N.on(document, Di, qi.clearMenus), N.on(document, Li, Ii, function(t3) {
          t3.preventDefault(), qi.getOrCreateInstance(this).toggle();
        }), m(qi);
        const Vi = "backdrop", Ki = "show", Qi = `mousedown.bs.${Vi}`, Xi = { className: "modal-backdrop", clickCallback: null, isAnimated: false, isVisible: true, rootElement: "body" }, Yi = { className: "string", clickCallback: "(function|null)", isAnimated: "boolean", isVisible: "boolean", rootElement: "(element|string)" };
        class Ui extends H {
          constructor(t3) {
            super(), this._config = this._getConfig(t3), this._isAppended = false, this._element = null;
          }
          static get Default() {
            return Xi;
          }
          static get DefaultType() {
            return Yi;
          }
          static get NAME() {
            return Vi;
          }
          show(t3) {
            if (!this._config.isVisible) return void g(t3);
            this._append();
            const e3 = this._getElement();
            this._config.isAnimated && d(e3), e3.classList.add(Ki), this._emulateAnimation(() => {
              g(t3);
            });
          }
          hide(t3) {
            this._config.isVisible ? (this._getElement().classList.remove(Ki), this._emulateAnimation(() => {
              this.dispose(), g(t3);
            })) : g(t3);
          }
          dispose() {
            this._isAppended && (N.off(this._element, Qi), this._element.remove(), this._isAppended = false);
          }
          _getElement() {
            if (!this._element) {
              const t3 = document.createElement("div");
              t3.className = this._config.className, this._config.isAnimated && t3.classList.add("fade"), this._element = t3;
            }
            return this._element;
          }
          _configAfterMerge(t3) {
            return t3.rootElement = r2(t3.rootElement), t3;
          }
          _append() {
            if (this._isAppended) return;
            const t3 = this._getElement();
            this._config.rootElement.append(t3), N.on(t3, Qi, () => {
              g(this._config.clickCallback);
            }), this._isAppended = true;
          }
          _emulateAnimation(t3) {
            _(t3, this._getElement(), this._config.isAnimated);
          }
        }
        const Gi = ".bs.focustrap", Ji = `focusin${Gi}`, Zi = `keydown.tab${Gi}`, tn = "backward", en = { autofocus: true, trapElement: null }, nn = { autofocus: "boolean", trapElement: "element" };
        class sn extends H {
          constructor(t3) {
            super(), this._config = this._getConfig(t3), this._isActive = false, this._lastTabNavDirection = null;
          }
          static get Default() {
            return en;
          }
          static get DefaultType() {
            return nn;
          }
          static get NAME() {
            return "focustrap";
          }
          activate() {
            this._isActive || (this._config.autofocus && this._config.trapElement.focus(), N.off(document, Gi), N.on(document, Ji, (t3) => this._handleFocusin(t3)), N.on(document, Zi, (t3) => this._handleKeydown(t3)), this._isActive = true);
          }
          deactivate() {
            this._isActive && (this._isActive = false, N.off(document, Gi));
          }
          _handleFocusin(t3) {
            const { trapElement: e3 } = this._config;
            if (t3.target === document || t3.target === e3 || e3.contains(t3.target)) return;
            const i4 = z.focusableChildren(e3);
            0 === i4.length ? e3.focus() : this._lastTabNavDirection === tn ? i4[i4.length - 1].focus() : i4[0].focus();
          }
          _handleKeydown(t3) {
            "Tab" === t3.key && (this._lastTabNavDirection = t3.shiftKey ? tn : "forward");
          }
        }
        const on = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", rn = ".sticky-top", an = "padding-right", ln = "margin-right";
        class cn {
          constructor() {
            this._element = document.body;
          }
          getWidth() {
            const t3 = document.documentElement.clientWidth;
            return Math.abs(window.innerWidth - t3);
          }
          hide() {
            const t3 = this.getWidth();
            this._disableOverFlow(), this._setElementAttributes(this._element, an, (e3) => e3 + t3), this._setElementAttributes(on, an, (e3) => e3 + t3), this._setElementAttributes(rn, ln, (e3) => e3 - t3);
          }
          reset() {
            this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, an), this._resetElementAttributes(on, an), this._resetElementAttributes(rn, ln);
          }
          isOverflowing() {
            return this.getWidth() > 0;
          }
          _disableOverFlow() {
            this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden";
          }
          _setElementAttributes(t3, e3, i4) {
            const n3 = this.getWidth();
            this._applyManipulationCallback(t3, (t4) => {
              if (t4 !== this._element && window.innerWidth > t4.clientWidth + n3) return;
              this._saveInitialAttribute(t4, e3);
              const s3 = window.getComputedStyle(t4).getPropertyValue(e3);
              t4.style.setProperty(e3, `${i4(Number.parseFloat(s3))}px`);
            });
          }
          _saveInitialAttribute(t3, e3) {
            const i4 = t3.style.getPropertyValue(e3);
            i4 && F.setDataAttribute(t3, e3, i4);
          }
          _resetElementAttributes(t3, e3) {
            this._applyManipulationCallback(t3, (t4) => {
              const i4 = F.getDataAttribute(t4, e3);
              null !== i4 ? (F.removeDataAttribute(t4, e3), t4.style.setProperty(e3, i4)) : t4.style.removeProperty(e3);
            });
          }
          _applyManipulationCallback(t3, e3) {
            if (o2(t3)) e3(t3);
            else for (const i4 of z.find(t3, this._element)) e3(i4);
          }
        }
        const hn = ".bs.modal", dn = `hide${hn}`, un = `hidePrevented${hn}`, fn = `hidden${hn}`, pn = `show${hn}`, mn = `shown${hn}`, gn = `resize${hn}`, _n = `click.dismiss${hn}`, bn = `mousedown.dismiss${hn}`, vn = `keydown.dismiss${hn}`, yn = `click${hn}.data-api`, wn = "modal-open", An = "show", En = "modal-static", Tn = { backdrop: true, focus: true, keyboard: true }, Cn = { backdrop: "(boolean|string)", focus: "boolean", keyboard: "boolean" };
        class On extends W {
          constructor(t3, e3) {
            super(t3, e3), this._dialog = z.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = false, this._isTransitioning = false, this._scrollBar = new cn(), this._addEventListeners();
          }
          static get Default() {
            return Tn;
          }
          static get DefaultType() {
            return Cn;
          }
          static get NAME() {
            return "modal";
          }
          toggle(t3) {
            return this._isShown ? this.hide() : this.show(t3);
          }
          show(t3) {
            this._isShown || this._isTransitioning || N.trigger(this._element, pn, { relatedTarget: t3 }).defaultPrevented || (this._isShown = true, this._isTransitioning = true, this._scrollBar.hide(), document.body.classList.add(wn), this._adjustDialog(), this._backdrop.show(() => this._showElement(t3)));
          }
          hide() {
            this._isShown && !this._isTransitioning && (N.trigger(this._element, dn).defaultPrevented || (this._isShown = false, this._isTransitioning = true, this._focustrap.deactivate(), this._element.classList.remove(An), this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())));
          }
          dispose() {
            N.off(window, hn), N.off(this._dialog, hn), this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();
          }
          handleUpdate() {
            this._adjustDialog();
          }
          _initializeBackDrop() {
            return new Ui({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() });
          }
          _initializeFocusTrap() {
            return new sn({ trapElement: this._element });
          }
          _showElement(t3) {
            document.body.contains(this._element) || document.body.append(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", true), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0;
            const e3 = z.findOne(".modal-body", this._dialog);
            e3 && (e3.scrollTop = 0), d(this._element), this._element.classList.add(An), this._queueCallback(() => {
              this._config.focus && this._focustrap.activate(), this._isTransitioning = false, N.trigger(this._element, mn, { relatedTarget: t3 });
            }, this._dialog, this._isAnimated());
          }
          _addEventListeners() {
            N.on(this._element, vn, (t3) => {
              "Escape" === t3.key && (this._config.keyboard ? this.hide() : this._triggerBackdropTransition());
            }), N.on(window, gn, () => {
              this._isShown && !this._isTransitioning && this._adjustDialog();
            }), N.on(this._element, bn, (t3) => {
              N.one(this._element, _n, (e3) => {
                this._element === t3.target && this._element === e3.target && ("static" !== this._config.backdrop ? this._config.backdrop && this.hide() : this._triggerBackdropTransition());
              });
            });
          }
          _hideModal() {
            this._element.style.display = "none", this._element.setAttribute("aria-hidden", true), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = false, this._backdrop.hide(() => {
              document.body.classList.remove(wn), this._resetAdjustments(), this._scrollBar.reset(), N.trigger(this._element, fn);
            });
          }
          _isAnimated() {
            return this._element.classList.contains("fade");
          }
          _triggerBackdropTransition() {
            if (N.trigger(this._element, un).defaultPrevented) return;
            const t3 = this._element.scrollHeight > document.documentElement.clientHeight, e3 = this._element.style.overflowY;
            "hidden" === e3 || this._element.classList.contains(En) || (t3 || (this._element.style.overflowY = "hidden"), this._element.classList.add(En), this._queueCallback(() => {
              this._element.classList.remove(En), this._queueCallback(() => {
                this._element.style.overflowY = e3;
              }, this._dialog);
            }, this._dialog), this._element.focus());
          }
          _adjustDialog() {
            const t3 = this._element.scrollHeight > document.documentElement.clientHeight, e3 = this._scrollBar.getWidth(), i4 = e3 > 0;
            if (i4 && !t3) {
              const t4 = p() ? "paddingLeft" : "paddingRight";
              this._element.style[t4] = `${e3}px`;
            }
            if (!i4 && t3) {
              const t4 = p() ? "paddingRight" : "paddingLeft";
              this._element.style[t4] = `${e3}px`;
            }
          }
          _resetAdjustments() {
            this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
          }
          static jQueryInterface(t3, e3) {
            return this.each(function() {
              const i4 = On.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === i4[t3]) throw new TypeError(`No method named "${t3}"`);
                i4[t3](e3);
              }
            });
          }
        }
        N.on(document, yn, '[data-bs-toggle="modal"]', function(t3) {
          const e3 = z.getElementFromSelector(this);
          ["A", "AREA"].includes(this.tagName) && t3.preventDefault(), N.one(e3, pn, (t4) => {
            t4.defaultPrevented || N.one(e3, fn, () => {
              a2(this) && this.focus();
            });
          });
          const i4 = z.findOne(".modal.show");
          i4 && On.getInstance(i4).hide(), On.getOrCreateInstance(e3).toggle(this);
        }), R(On), m(On);
        const xn = ".bs.offcanvas", kn = ".data-api", Ln = `load${xn}${kn}`, Sn = "show", Dn = "showing", $n = "hiding", In = ".offcanvas.show", Nn = `show${xn}`, Pn = `shown${xn}`, jn = `hide${xn}`, Mn = `hidePrevented${xn}`, Fn = `hidden${xn}`, Hn = `resize${xn}`, Wn = `click${xn}${kn}`, Bn = `keydown.dismiss${xn}`, zn = { backdrop: true, keyboard: true, scroll: false }, Rn = { backdrop: "(boolean|string)", keyboard: "boolean", scroll: "boolean" };
        class qn extends W {
          constructor(t3, e3) {
            super(t3, e3), this._isShown = false, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners();
          }
          static get Default() {
            return zn;
          }
          static get DefaultType() {
            return Rn;
          }
          static get NAME() {
            return "offcanvas";
          }
          toggle(t3) {
            return this._isShown ? this.hide() : this.show(t3);
          }
          show(t3) {
            this._isShown || N.trigger(this._element, Nn, { relatedTarget: t3 }).defaultPrevented || (this._isShown = true, this._backdrop.show(), this._config.scroll || new cn().hide(), this._element.setAttribute("aria-modal", true), this._element.setAttribute("role", "dialog"), this._element.classList.add(Dn), this._queueCallback(() => {
              this._config.scroll && !this._config.backdrop || this._focustrap.activate(), this._element.classList.add(Sn), this._element.classList.remove(Dn), N.trigger(this._element, Pn, { relatedTarget: t3 });
            }, this._element, true));
          }
          hide() {
            this._isShown && (N.trigger(this._element, jn).defaultPrevented || (this._focustrap.deactivate(), this._element.blur(), this._isShown = false, this._element.classList.add($n), this._backdrop.hide(), this._queueCallback(() => {
              this._element.classList.remove(Sn, $n), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._config.scroll || new cn().reset(), N.trigger(this._element, Fn);
            }, this._element, true)));
          }
          dispose() {
            this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();
          }
          _initializeBackDrop() {
            const t3 = Boolean(this._config.backdrop);
            return new Ui({ className: "offcanvas-backdrop", isVisible: t3, isAnimated: true, rootElement: this._element.parentNode, clickCallback: t3 ? () => {
              "static" !== this._config.backdrop ? this.hide() : N.trigger(this._element, Mn);
            } : null });
          }
          _initializeFocusTrap() {
            return new sn({ trapElement: this._element });
          }
          _addEventListeners() {
            N.on(this._element, Bn, (t3) => {
              "Escape" === t3.key && (this._config.keyboard ? this.hide() : N.trigger(this._element, Mn));
            });
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = qn.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3] || t3.startsWith("_") || "constructor" === t3) throw new TypeError(`No method named "${t3}"`);
                e3[t3](this);
              }
            });
          }
        }
        N.on(document, Wn, '[data-bs-toggle="offcanvas"]', function(t3) {
          const e3 = z.getElementFromSelector(this);
          if (["A", "AREA"].includes(this.tagName) && t3.preventDefault(), l(this)) return;
          N.one(e3, Fn, () => {
            a2(this) && this.focus();
          });
          const i4 = z.findOne(In);
          i4 && i4 !== e3 && qn.getInstance(i4).hide(), qn.getOrCreateInstance(e3).toggle(this);
        }), N.on(window, Ln, () => {
          for (const t3 of z.find(In)) qn.getOrCreateInstance(t3).show();
        }), N.on(window, Hn, () => {
          for (const t3 of z.find("[aria-modal][class*=show][class*=offcanvas-]")) "fixed" !== getComputedStyle(t3).position && qn.getOrCreateInstance(t3).hide();
        }), R(qn), m(qn);
        const Vn = { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], dd: [], div: [], dl: [], dt: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, Kn = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]), Qn = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i, Xn = (t3, e3) => {
          const i4 = t3.nodeName.toLowerCase();
          return e3.includes(i4) ? !Kn.has(i4) || Boolean(Qn.test(t3.nodeValue)) : e3.filter((t4) => t4 instanceof RegExp).some((t4) => t4.test(i4));
        }, Yn = { allowList: Vn, content: {}, extraClass: "", html: false, sanitize: true, sanitizeFn: null, template: "<div></div>" }, Un = { allowList: "object", content: "object", extraClass: "(string|function)", html: "boolean", sanitize: "boolean", sanitizeFn: "(null|function)", template: "string" }, Gn = { entry: "(string|element|function|null)", selector: "(string|element)" };
        class Jn extends H {
          constructor(t3) {
            super(), this._config = this._getConfig(t3);
          }
          static get Default() {
            return Yn;
          }
          static get DefaultType() {
            return Un;
          }
          static get NAME() {
            return "TemplateFactory";
          }
          getContent() {
            return Object.values(this._config.content).map((t3) => this._resolvePossibleFunction(t3)).filter(Boolean);
          }
          hasContent() {
            return this.getContent().length > 0;
          }
          changeContent(t3) {
            return this._checkContent(t3), this._config.content = __spreadValues(__spreadValues({}, this._config.content), t3), this;
          }
          toHtml() {
            const t3 = document.createElement("div");
            t3.innerHTML = this._maybeSanitize(this._config.template);
            for (const [e4, i5] of Object.entries(this._config.content)) this._setContent(t3, i5, e4);
            const e3 = t3.children[0], i4 = this._resolvePossibleFunction(this._config.extraClass);
            return i4 && e3.classList.add(...i4.split(" ")), e3;
          }
          _typeCheckConfig(t3) {
            super._typeCheckConfig(t3), this._checkContent(t3.content);
          }
          _checkContent(t3) {
            for (const [e3, i4] of Object.entries(t3)) super._typeCheckConfig({ selector: e3, entry: i4 }, Gn);
          }
          _setContent(t3, e3, i4) {
            const n3 = z.findOne(i4, t3);
            n3 && ((e3 = this._resolvePossibleFunction(e3)) ? o2(e3) ? this._putElementInTemplate(r2(e3), n3) : this._config.html ? n3.innerHTML = this._maybeSanitize(e3) : n3.textContent = e3 : n3.remove());
          }
          _maybeSanitize(t3) {
            return this._config.sanitize ? function(t4, e3, i4) {
              if (!t4.length) return t4;
              if (i4 && "function" == typeof i4) return i4(t4);
              const n3 = new window.DOMParser().parseFromString(t4, "text/html"), s3 = [].concat(...n3.body.querySelectorAll("*"));
              for (const t5 of s3) {
                const i5 = t5.nodeName.toLowerCase();
                if (!Object.keys(e3).includes(i5)) {
                  t5.remove();
                  continue;
                }
                const n4 = [].concat(...t5.attributes), s4 = [].concat(e3["*"] || [], e3[i5] || []);
                for (const e4 of n4) Xn(e4, s4) || t5.removeAttribute(e4.nodeName);
              }
              return n3.body.innerHTML;
            }(t3, this._config.allowList, this._config.sanitizeFn) : t3;
          }
          _resolvePossibleFunction(t3) {
            return g(t3, [this]);
          }
          _putElementInTemplate(t3, e3) {
            if (this._config.html) return e3.innerHTML = "", void e3.append(t3);
            e3.textContent = t3.textContent;
          }
        }
        const Zn = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]), ts = "fade", es = "show", is = ".modal", ns = "hide.bs.modal", ss = "hover", os = "focus", rs = { AUTO: "auto", TOP: "top", RIGHT: p() ? "left" : "right", BOTTOM: "bottom", LEFT: p() ? "right" : "left" }, as = { allowList: Vn, animation: true, boundary: "clippingParents", container: false, customClass: "", delay: 0, fallbackPlacements: ["top", "right", "bottom", "left"], html: false, offset: [0, 6], placement: "top", popperConfig: null, sanitize: true, sanitizeFn: null, selector: false, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', title: "", trigger: "hover focus" }, ls = { allowList: "object", animation: "boolean", boundary: "(string|element)", container: "(string|element|boolean)", customClass: "(string|function)", delay: "(number|object)", fallbackPlacements: "array", html: "boolean", offset: "(array|string|function)", placement: "(string|function)", popperConfig: "(null|object|function)", sanitize: "boolean", sanitizeFn: "(null|function)", selector: "(string|boolean)", template: "string", title: "(string|element|function)", trigger: "string" };
        class cs extends W {
          constructor(t3, e3) {
            if (void 0 === vi) throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
            super(t3, e3), this._isEnabled = true, this._timeout = 0, this._isHovered = null, this._activeTrigger = {}, this._popper = null, this._templateFactory = null, this._newContent = null, this.tip = null, this._setListeners(), this._config.selector || this._fixTitle();
          }
          static get Default() {
            return as;
          }
          static get DefaultType() {
            return ls;
          }
          static get NAME() {
            return "tooltip";
          }
          enable() {
            this._isEnabled = true;
          }
          disable() {
            this._isEnabled = false;
          }
          toggleEnabled() {
            this._isEnabled = !this._isEnabled;
          }
          toggle() {
            this._isEnabled && (this._activeTrigger.click = !this._activeTrigger.click, this._isShown() ? this._leave() : this._enter());
          }
          dispose() {
            clearTimeout(this._timeout), N.off(this._element.closest(is), ns, this._hideModalHandler), this._element.getAttribute("data-bs-original-title") && this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title")), this._disposePopper(), super.dispose();
          }
          show() {
            if ("none" === this._element.style.display) throw new Error("Please use show on visible elements");
            if (!this._isWithContent() || !this._isEnabled) return;
            const t3 = N.trigger(this._element, this.constructor.eventName("show")), e3 = (c2(this._element) || this._element.ownerDocument.documentElement).contains(this._element);
            if (t3.defaultPrevented || !e3) return;
            this._disposePopper();
            const i4 = this._getTipElement();
            this._element.setAttribute("aria-describedby", i4.getAttribute("id"));
            const { container: n3 } = this._config;
            if (this._element.ownerDocument.documentElement.contains(this.tip) || (n3.append(i4), N.trigger(this._element, this.constructor.eventName("inserted"))), this._popper = this._createPopper(i4), i4.classList.add(es), "ontouchstart" in document.documentElement) for (const t4 of [].concat(...document.body.children)) N.on(t4, "mouseover", h);
            this._queueCallback(() => {
              N.trigger(this._element, this.constructor.eventName("shown")), false === this._isHovered && this._leave(), this._isHovered = false;
            }, this.tip, this._isAnimated());
          }
          hide() {
            if (this._isShown() && !N.trigger(this._element, this.constructor.eventName("hide")).defaultPrevented) {
              if (this._getTipElement().classList.remove(es), "ontouchstart" in document.documentElement) for (const t3 of [].concat(...document.body.children)) N.off(t3, "mouseover", h);
              this._activeTrigger.click = false, this._activeTrigger[os] = false, this._activeTrigger[ss] = false, this._isHovered = null, this._queueCallback(() => {
                this._isWithActiveTrigger() || (this._isHovered || this._disposePopper(), this._element.removeAttribute("aria-describedby"), N.trigger(this._element, this.constructor.eventName("hidden")));
              }, this.tip, this._isAnimated());
            }
          }
          update() {
            this._popper && this._popper.update();
          }
          _isWithContent() {
            return Boolean(this._getTitle());
          }
          _getTipElement() {
            return this.tip || (this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())), this.tip;
          }
          _createTipElement(t3) {
            const e3 = this._getTemplateFactory(t3).toHtml();
            if (!e3) return null;
            e3.classList.remove(ts, es), e3.classList.add(`bs-${this.constructor.NAME}-auto`);
            const i4 = ((t4) => {
              do {
                t4 += Math.floor(1e6 * Math.random());
              } while (document.getElementById(t4));
              return t4;
            })(this.constructor.NAME).toString();
            return e3.setAttribute("id", i4), this._isAnimated() && e3.classList.add(ts), e3;
          }
          setContent(t3) {
            this._newContent = t3, this._isShown() && (this._disposePopper(), this.show());
          }
          _getTemplateFactory(t3) {
            return this._templateFactory ? this._templateFactory.changeContent(t3) : this._templateFactory = new Jn(__spreadProps(__spreadValues({}, this._config), { content: t3, extraClass: this._resolvePossibleFunction(this._config.customClass) })), this._templateFactory;
          }
          _getContentForTemplate() {
            return { ".tooltip-inner": this._getTitle() };
          }
          _getTitle() {
            return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
          }
          _initializeOnDelegatedTarget(t3) {
            return this.constructor.getOrCreateInstance(t3.delegateTarget, this._getDelegateConfig());
          }
          _isAnimated() {
            return this._config.animation || this.tip && this.tip.classList.contains(ts);
          }
          _isShown() {
            return this.tip && this.tip.classList.contains(es);
          }
          _createPopper(t3) {
            const e3 = g(this._config.placement, [this, t3, this._element]), i4 = rs[e3.toUpperCase()];
            return bi(this._element, t3, this._getPopperConfig(i4));
          }
          _getOffset() {
            const { offset: t3 } = this._config;
            return "string" == typeof t3 ? t3.split(",").map((t4) => Number.parseInt(t4, 10)) : "function" == typeof t3 ? (e3) => t3(e3, this._element) : t3;
          }
          _resolvePossibleFunction(t3) {
            return g(t3, [this._element]);
          }
          _getPopperConfig(t3) {
            const e3 = { placement: t3, modifiers: [{ name: "flip", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: "offset", options: { offset: this._getOffset() } }, { name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "arrow", options: { element: `.${this.constructor.NAME}-arrow` } }, { name: "preSetPlacement", enabled: true, phase: "beforeMain", fn: (t4) => {
              this._getTipElement().setAttribute("data-popper-placement", t4.state.placement);
            } }] };
            return __spreadValues(__spreadValues({}, e3), g(this._config.popperConfig, [e3]));
          }
          _setListeners() {
            const t3 = this._config.trigger.split(" ");
            for (const e3 of t3) if ("click" === e3) N.on(this._element, this.constructor.eventName("click"), this._config.selector, (t4) => {
              this._initializeOnDelegatedTarget(t4).toggle();
            });
            else if ("manual" !== e3) {
              const t4 = e3 === ss ? this.constructor.eventName("mouseenter") : this.constructor.eventName("focusin"), i4 = e3 === ss ? this.constructor.eventName("mouseleave") : this.constructor.eventName("focusout");
              N.on(this._element, t4, this._config.selector, (t5) => {
                const e4 = this._initializeOnDelegatedTarget(t5);
                e4._activeTrigger["focusin" === t5.type ? os : ss] = true, e4._enter();
              }), N.on(this._element, i4, this._config.selector, (t5) => {
                const e4 = this._initializeOnDelegatedTarget(t5);
                e4._activeTrigger["focusout" === t5.type ? os : ss] = e4._element.contains(t5.relatedTarget), e4._leave();
              });
            }
            this._hideModalHandler = () => {
              this._element && this.hide();
            }, N.on(this._element.closest(is), ns, this._hideModalHandler);
          }
          _fixTitle() {
            const t3 = this._element.getAttribute("title");
            t3 && (this._element.getAttribute("aria-label") || this._element.textContent.trim() || this._element.setAttribute("aria-label", t3), this._element.setAttribute("data-bs-original-title", t3), this._element.removeAttribute("title"));
          }
          _enter() {
            this._isShown() || this._isHovered ? this._isHovered = true : (this._isHovered = true, this._setTimeout(() => {
              this._isHovered && this.show();
            }, this._config.delay.show));
          }
          _leave() {
            this._isWithActiveTrigger() || (this._isHovered = false, this._setTimeout(() => {
              this._isHovered || this.hide();
            }, this._config.delay.hide));
          }
          _setTimeout(t3, e3) {
            clearTimeout(this._timeout), this._timeout = setTimeout(t3, e3);
          }
          _isWithActiveTrigger() {
            return Object.values(this._activeTrigger).includes(true);
          }
          _getConfig(t3) {
            const e3 = F.getDataAttributes(this._element);
            for (const t4 of Object.keys(e3)) Zn.has(t4) && delete e3[t4];
            return t3 = __spreadValues(__spreadValues({}, e3), "object" == typeof t3 && t3 ? t3 : {}), t3 = this._mergeConfigObj(t3), t3 = this._configAfterMerge(t3), this._typeCheckConfig(t3), t3;
          }
          _configAfterMerge(t3) {
            return t3.container = false === t3.container ? document.body : r2(t3.container), "number" == typeof t3.delay && (t3.delay = { show: t3.delay, hide: t3.delay }), "number" == typeof t3.title && (t3.title = t3.title.toString()), "number" == typeof t3.content && (t3.content = t3.content.toString()), t3;
          }
          _getDelegateConfig() {
            const t3 = {};
            for (const [e3, i4] of Object.entries(this._config)) this.constructor.Default[e3] !== i4 && (t3[e3] = i4);
            return t3.selector = false, t3.trigger = "manual", t3;
          }
          _disposePopper() {
            this._popper && (this._popper.destroy(), this._popper = null), this.tip && (this.tip.remove(), this.tip = null);
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = cs.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3]) throw new TypeError(`No method named "${t3}"`);
                e3[t3]();
              }
            });
          }
        }
        m(cs);
        const hs = __spreadProps(__spreadValues({}, cs.Default), { content: "", offset: [0, 8], placement: "right", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>', trigger: "click" }), ds = __spreadProps(__spreadValues({}, cs.DefaultType), { content: "(null|string|element|function)" });
        class us extends cs {
          static get Default() {
            return hs;
          }
          static get DefaultType() {
            return ds;
          }
          static get NAME() {
            return "popover";
          }
          _isWithContent() {
            return this._getTitle() || this._getContent();
          }
          _getContentForTemplate() {
            return { ".popover-header": this._getTitle(), ".popover-body": this._getContent() };
          }
          _getContent() {
            return this._resolvePossibleFunction(this._config.content);
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = us.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3]) throw new TypeError(`No method named "${t3}"`);
                e3[t3]();
              }
            });
          }
        }
        m(us);
        const fs = ".bs.scrollspy", ps = `activate${fs}`, ms = `click${fs}`, gs = `load${fs}.data-api`, _s = "active", bs = "[href]", vs = ".nav-link", ys = `${vs}, .nav-item > ${vs}, .list-group-item`, ws = { offset: null, rootMargin: "0px 0px -25%", smoothScroll: false, target: null, threshold: [0.1, 0.5, 1] }, As = { offset: "(number|null)", rootMargin: "string", smoothScroll: "boolean", target: "element", threshold: "array" };
        class Es extends W {
          constructor(t3, e3) {
            super(t3, e3), this._targetLinks = /* @__PURE__ */ new Map(), this._observableSections = /* @__PURE__ */ new Map(), this._rootElement = "visible" === getComputedStyle(this._element).overflowY ? null : this._element, this._activeTarget = null, this._observer = null, this._previousScrollData = { visibleEntryTop: 0, parentScrollTop: 0 }, this.refresh();
          }
          static get Default() {
            return ws;
          }
          static get DefaultType() {
            return As;
          }
          static get NAME() {
            return "scrollspy";
          }
          refresh() {
            this._initializeTargetsAndObservables(), this._maybeEnableSmoothScroll(), this._observer ? this._observer.disconnect() : this._observer = this._getNewObserver();
            for (const t3 of this._observableSections.values()) this._observer.observe(t3);
          }
          dispose() {
            this._observer.disconnect(), super.dispose();
          }
          _configAfterMerge(t3) {
            return t3.target = r2(t3.target) || document.body, t3.rootMargin = t3.offset ? `${t3.offset}px 0px -30%` : t3.rootMargin, "string" == typeof t3.threshold && (t3.threshold = t3.threshold.split(",").map((t4) => Number.parseFloat(t4))), t3;
          }
          _maybeEnableSmoothScroll() {
            this._config.smoothScroll && (N.off(this._config.target, ms), N.on(this._config.target, ms, bs, (t3) => {
              const e3 = this._observableSections.get(t3.target.hash);
              if (e3) {
                t3.preventDefault();
                const i4 = this._rootElement || window, n3 = e3.offsetTop - this._element.offsetTop;
                if (i4.scrollTo) return void i4.scrollTo({ top: n3, behavior: "smooth" });
                i4.scrollTop = n3;
              }
            }));
          }
          _getNewObserver() {
            const t3 = { root: this._rootElement, threshold: this._config.threshold, rootMargin: this._config.rootMargin };
            return new IntersectionObserver((t4) => this._observerCallback(t4), t3);
          }
          _observerCallback(t3) {
            const e3 = (t4) => this._targetLinks.get(`#${t4.target.id}`), i4 = (t4) => {
              this._previousScrollData.visibleEntryTop = t4.target.offsetTop, this._process(e3(t4));
            }, n3 = (this._rootElement || document.documentElement).scrollTop, s3 = n3 >= this._previousScrollData.parentScrollTop;
            this._previousScrollData.parentScrollTop = n3;
            for (const o3 of t3) {
              if (!o3.isIntersecting) {
                this._activeTarget = null, this._clearActiveClass(e3(o3));
                continue;
              }
              const t4 = o3.target.offsetTop >= this._previousScrollData.visibleEntryTop;
              if (s3 && t4) {
                if (i4(o3), !n3) return;
              } else s3 || t4 || i4(o3);
            }
          }
          _initializeTargetsAndObservables() {
            this._targetLinks = /* @__PURE__ */ new Map(), this._observableSections = /* @__PURE__ */ new Map();
            const t3 = z.find(bs, this._config.target);
            for (const e3 of t3) {
              if (!e3.hash || l(e3)) continue;
              const t4 = z.findOne(decodeURI(e3.hash), this._element);
              a2(t4) && (this._targetLinks.set(decodeURI(e3.hash), e3), this._observableSections.set(e3.hash, t4));
            }
          }
          _process(t3) {
            this._activeTarget !== t3 && (this._clearActiveClass(this._config.target), this._activeTarget = t3, t3.classList.add(_s), this._activateParents(t3), N.trigger(this._element, ps, { relatedTarget: t3 }));
          }
          _activateParents(t3) {
            if (t3.classList.contains("dropdown-item")) z.findOne(".dropdown-toggle", t3.closest(".dropdown")).classList.add(_s);
            else for (const e3 of z.parents(t3, ".nav, .list-group")) for (const t4 of z.prev(e3, ys)) t4.classList.add(_s);
          }
          _clearActiveClass(t3) {
            t3.classList.remove(_s);
            const e3 = z.find(`${bs}.${_s}`, t3);
            for (const t4 of e3) t4.classList.remove(_s);
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = Es.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3] || t3.startsWith("_") || "constructor" === t3) throw new TypeError(`No method named "${t3}"`);
                e3[t3]();
              }
            });
          }
        }
        N.on(window, gs, () => {
          for (const t3 of z.find('[data-bs-spy="scroll"]')) Es.getOrCreateInstance(t3);
        }), m(Es);
        const Ts = ".bs.tab", Cs = `hide${Ts}`, Os = `hidden${Ts}`, xs = `show${Ts}`, ks = `shown${Ts}`, Ls = `click${Ts}`, Ss = `keydown${Ts}`, Ds = `load${Ts}`, $s = "ArrowLeft", Is = "ArrowRight", Ns = "ArrowUp", Ps = "ArrowDown", js = "Home", Ms = "End", Fs = "active", Hs = "fade", Ws = "show", Bs = ".dropdown-toggle", zs = `:not(${Bs})`, Rs = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', qs = `.nav-link${zs}, .list-group-item${zs}, [role="tab"]${zs}, ${Rs}`, Vs = `.${Fs}[data-bs-toggle="tab"], .${Fs}[data-bs-toggle="pill"], .${Fs}[data-bs-toggle="list"]`;
        class Ks extends W {
          constructor(t3) {
            super(t3), this._parent = this._element.closest('.list-group, .nav, [role="tablist"]'), this._parent && (this._setInitialAttributes(this._parent, this._getChildren()), N.on(this._element, Ss, (t4) => this._keydown(t4)));
          }
          static get NAME() {
            return "tab";
          }
          show() {
            const t3 = this._element;
            if (this._elemIsActive(t3)) return;
            const e3 = this._getActiveElem(), i4 = e3 ? N.trigger(e3, Cs, { relatedTarget: t3 }) : null;
            N.trigger(t3, xs, { relatedTarget: e3 }).defaultPrevented || i4 && i4.defaultPrevented || (this._deactivate(e3, t3), this._activate(t3, e3));
          }
          _activate(t3, e3) {
            t3 && (t3.classList.add(Fs), this._activate(z.getElementFromSelector(t3)), this._queueCallback(() => {
              "tab" === t3.getAttribute("role") ? (t3.removeAttribute("tabindex"), t3.setAttribute("aria-selected", true), this._toggleDropDown(t3, true), N.trigger(t3, ks, { relatedTarget: e3 })) : t3.classList.add(Ws);
            }, t3, t3.classList.contains(Hs)));
          }
          _deactivate(t3, e3) {
            t3 && (t3.classList.remove(Fs), t3.blur(), this._deactivate(z.getElementFromSelector(t3)), this._queueCallback(() => {
              "tab" === t3.getAttribute("role") ? (t3.setAttribute("aria-selected", false), t3.setAttribute("tabindex", "-1"), this._toggleDropDown(t3, false), N.trigger(t3, Os, { relatedTarget: e3 })) : t3.classList.remove(Ws);
            }, t3, t3.classList.contains(Hs)));
          }
          _keydown(t3) {
            if (![$s, Is, Ns, Ps, js, Ms].includes(t3.key)) return;
            t3.stopPropagation(), t3.preventDefault();
            const e3 = this._getChildren().filter((t4) => !l(t4));
            let i4;
            if ([js, Ms].includes(t3.key)) i4 = e3[t3.key === js ? 0 : e3.length - 1];
            else {
              const n3 = [Is, Ps].includes(t3.key);
              i4 = b(e3, t3.target, n3, true);
            }
            i4 && (i4.focus({ preventScroll: true }), Ks.getOrCreateInstance(i4).show());
          }
          _getChildren() {
            return z.find(qs, this._parent);
          }
          _getActiveElem() {
            return this._getChildren().find((t3) => this._elemIsActive(t3)) || null;
          }
          _setInitialAttributes(t3, e3) {
            this._setAttributeIfNotExists(t3, "role", "tablist");
            for (const t4 of e3) this._setInitialAttributesOnChild(t4);
          }
          _setInitialAttributesOnChild(t3) {
            t3 = this._getInnerElement(t3);
            const e3 = this._elemIsActive(t3), i4 = this._getOuterElement(t3);
            t3.setAttribute("aria-selected", e3), i4 !== t3 && this._setAttributeIfNotExists(i4, "role", "presentation"), e3 || t3.setAttribute("tabindex", "-1"), this._setAttributeIfNotExists(t3, "role", "tab"), this._setInitialAttributesOnTargetPanel(t3);
          }
          _setInitialAttributesOnTargetPanel(t3) {
            const e3 = z.getElementFromSelector(t3);
            e3 && (this._setAttributeIfNotExists(e3, "role", "tabpanel"), t3.id && this._setAttributeIfNotExists(e3, "aria-labelledby", `${t3.id}`));
          }
          _toggleDropDown(t3, e3) {
            const i4 = this._getOuterElement(t3);
            if (!i4.classList.contains("dropdown")) return;
            const n3 = (t4, n4) => {
              const s3 = z.findOne(t4, i4);
              s3 && s3.classList.toggle(n4, e3);
            };
            n3(Bs, Fs), n3(".dropdown-menu", Ws), i4.setAttribute("aria-expanded", e3);
          }
          _setAttributeIfNotExists(t3, e3, i4) {
            t3.hasAttribute(e3) || t3.setAttribute(e3, i4);
          }
          _elemIsActive(t3) {
            return t3.classList.contains(Fs);
          }
          _getInnerElement(t3) {
            return t3.matches(qs) ? t3 : z.findOne(qs, t3);
          }
          _getOuterElement(t3) {
            return t3.closest(".nav-item, .list-group-item") || t3;
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = Ks.getOrCreateInstance(this);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3] || t3.startsWith("_") || "constructor" === t3) throw new TypeError(`No method named "${t3}"`);
                e3[t3]();
              }
            });
          }
        }
        N.on(document, Ls, Rs, function(t3) {
          ["A", "AREA"].includes(this.tagName) && t3.preventDefault(), l(this) || Ks.getOrCreateInstance(this).show();
        }), N.on(window, Ds, () => {
          for (const t3 of z.find(Vs)) Ks.getOrCreateInstance(t3);
        }), m(Ks);
        const Qs = ".bs.toast", Xs = `mouseover${Qs}`, Ys = `mouseout${Qs}`, Us = `focusin${Qs}`, Gs = `focusout${Qs}`, Js = `hide${Qs}`, Zs = `hidden${Qs}`, to = `show${Qs}`, eo = `shown${Qs}`, io = "hide", no = "show", so = "showing", oo = { animation: "boolean", autohide: "boolean", delay: "number" }, ro = { animation: true, autohide: true, delay: 5e3 };
        class ao extends W {
          constructor(t3, e3) {
            super(t3, e3), this._timeout = null, this._hasMouseInteraction = false, this._hasKeyboardInteraction = false, this._setListeners();
          }
          static get Default() {
            return ro;
          }
          static get DefaultType() {
            return oo;
          }
          static get NAME() {
            return "toast";
          }
          show() {
            N.trigger(this._element, to).defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add("fade"), this._element.classList.remove(io), d(this._element), this._element.classList.add(no, so), this._queueCallback(() => {
              this._element.classList.remove(so), N.trigger(this._element, eo), this._maybeScheduleHide();
            }, this._element, this._config.animation));
          }
          hide() {
            this.isShown() && (N.trigger(this._element, Js).defaultPrevented || (this._element.classList.add(so), this._queueCallback(() => {
              this._element.classList.add(io), this._element.classList.remove(so, no), N.trigger(this._element, Zs);
            }, this._element, this._config.animation)));
          }
          dispose() {
            this._clearTimeout(), this.isShown() && this._element.classList.remove(no), super.dispose();
          }
          isShown() {
            return this._element.classList.contains(no);
          }
          _maybeScheduleHide() {
            this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(() => {
              this.hide();
            }, this._config.delay)));
          }
          _onInteraction(t3, e3) {
            switch (t3.type) {
              case "mouseover":
              case "mouseout":
                this._hasMouseInteraction = e3;
                break;
              case "focusin":
              case "focusout":
                this._hasKeyboardInteraction = e3;
            }
            if (e3) return void this._clearTimeout();
            const i4 = t3.relatedTarget;
            this._element === i4 || this._element.contains(i4) || this._maybeScheduleHide();
          }
          _setListeners() {
            N.on(this._element, Xs, (t3) => this._onInteraction(t3, true)), N.on(this._element, Ys, (t3) => this._onInteraction(t3, false)), N.on(this._element, Us, (t3) => this._onInteraction(t3, true)), N.on(this._element, Gs, (t3) => this._onInteraction(t3, false));
          }
          _clearTimeout() {
            clearTimeout(this._timeout), this._timeout = null;
          }
          static jQueryInterface(t3) {
            return this.each(function() {
              const e3 = ao.getOrCreateInstance(this, t3);
              if ("string" == typeof t3) {
                if (void 0 === e3[t3]) throw new TypeError(`No method named "${t3}"`);
                e3[t3](this);
              }
            });
          }
        }
        return R(ao), m(ao), { Alert: Q, Button: Y, Carousel: xt, Collapse: Bt, Dropdown: qi, Modal: On, Offcanvas: qn, Popover: us, ScrollSpy: Es, Tab: Ks, Toast: ao, Tooltip: cs };
      });
    }
  });

  // node_modules/quicklink/dist/quicklink.mjs
  function e(e2) {
    return new Promise(function(n2, r2, t2) {
      (t2 = new XMLHttpRequest()).open("GET", e2, t2.withCredentials = true), t2.onload = function() {
        200 === t2.status ? n2() : r2();
      }, t2.send();
    });
  }
  var n;
  var r = (n = document.createElement("link")).relList && n.relList.supports && n.relList.supports("prefetch") ? function(e2) {
    return new Promise(function(n2, r2, t2) {
      (t2 = document.createElement("link")).rel = "prefetch", t2.href = e2, t2.onload = n2, t2.onerror = r2, document.head.appendChild(t2);
    });
  } : e;
  var t = window.requestIdleCallback || function(e2) {
    var n2 = Date.now();
    return setTimeout(function() {
      e2({ didTimeout: false, timeRemaining: function() {
        return Math.max(0, 50 - (Date.now() - n2));
      } });
    }, 1);
  };
  var o = /* @__PURE__ */ new Set();
  var i = /* @__PURE__ */ new Set();
  var c = false;
  function a(e2) {
    if (e2) {
      if (e2.saveData) return new Error("Save-Data is enabled");
      if (/2g/.test(e2.effectiveType)) return new Error("network conditions are poor");
    }
    return true;
  }
  function u(e2) {
    if (e2 || (e2 = {}), window.IntersectionObserver) {
      var n2 = function(e3) {
        e3 = e3 || 1;
        var n3 = [], r3 = 0;
        function t2() {
          r3 < e3 && n3.length > 0 && (n3.shift()(), r3++);
        }
        return [function(e4) {
          n3.push(e4) > 1 || t2();
        }, function() {
          r3--, t2();
        }];
      }(e2.throttle || 1 / 0), r2 = n2[0], a2 = n2[1], u2 = e2.limit || 1 / 0, l = e2.origins || [location.hostname], d = e2.ignores || [], h = e2.delay || 0, p = [], m = e2.timeoutFn || t, w = "function" == typeof e2.hrefFn && e2.hrefFn, g = e2.prerender || false;
      c = e2.prerenderAndPrefetch || false;
      var v = new IntersectionObserver(function(n3) {
        n3.forEach(function(n4) {
          if (n4.isIntersecting) p.push((n4 = n4.target).href), function(e3, n5) {
            n5 ? setTimeout(e3, n5) : e3();
          }(function() {
            -1 !== p.indexOf(n4.href) && (v.unobserve(n4), (c || g) && i.size < 1 ? f(w ? w(n4) : n4.href).catch(function(n5) {
              if (!e2.onError) throw n5;
              e2.onError(n5);
            }) : o.size < u2 && !g && r2(function() {
              s(w ? w(n4) : n4.href, e2.priority).then(a2).catch(function(n5) {
                a2(), e2.onError && e2.onError(n5);
              });
            }));
          }, h);
          else {
            var t2 = p.indexOf((n4 = n4.target).href);
            t2 > -1 && p.splice(t2);
          }
        });
      }, { threshold: e2.threshold || 0 });
      return m(function() {
        (e2.el || document).querySelectorAll("a").forEach(function(e3) {
          l.length && !l.includes(e3.hostname) || function e4(n3, r3) {
            return Array.isArray(r3) ? r3.some(function(r4) {
              return e4(n3, r4);
            }) : (r3.test || r3).call(r3, n3.href, n3);
          }(e3, d) || v.observe(e3);
        });
      }, { timeout: e2.timeout || 2e3 }), function() {
        o.clear(), v.disconnect();
      };
    }
  }
  function s(n2, t2, u2) {
    var s2 = a(navigator.connection);
    return s2 instanceof Error ? Promise.reject(new Error("Cannot prefetch, " + s2.message)) : (i.size > 0 && !c && console.warn("[Warning] You are using both prefetching and prerendering on the same document"), Promise.all([].concat(n2).map(function(n3) {
      if (!o.has(n3)) return o.add(n3), (t2 ? function(n4) {
        return window.fetch ? fetch(n4, { credentials: "include" }) : e(n4);
      } : r)(new URL(n3, location.href).toString());
    })));
  }
  function f(e2, n2) {
    var r2 = a(navigator.connection);
    if (r2 instanceof Error) return Promise.reject(new Error("Cannot prerender, " + r2.message));
    if (!HTMLScriptElement.supports("speculationrules")) return s(e2), Promise.reject(new Error("This browser does not support the speculation rules API. Falling back to prefetch."));
    if (document.querySelector('script[type="speculationrules"]')) return Promise.reject(new Error("Speculation Rules is already defined and cannot be altered."));
    for (var t2 = 0, u2 = [].concat(e2); t2 < u2.length; t2 += 1) {
      var f2 = u2[t2];
      if (window.location.origin !== new URL(f2, window.location.href).origin) return Promise.reject(new Error("Only same origin URLs are allowed: " + f2));
      i.add(f2);
    }
    o.size > 0 && !c && console.warn("[Warning] You are using both prefetching and prerendering on the same document");
    var l = function(e3) {
      var n3 = document.createElement("script");
      n3.type = "speculationrules", n3.text = '{"prerender":[{"source": "list","urls": ["' + Array.from(e3).join('","') + '"]}]}';
      try {
        document.head.appendChild(n3);
      } catch (e4) {
        return e4;
      }
      return true;
    }(i);
    return true === l ? Promise.resolve() : Promise.reject(l);
  }

  // node_modules/@thulite/core/assets/js/core.js
  var import_lazysizes = __toESM(require_lazysizes());
  var import_ls = __toESM(require_ls_native_loading());
  u({
    ignores: [
      /\/api\/?/,
      (uri) => uri.includes(".zip"),
      (uri, elem) => elem.hasAttribute("noprefetch"),
      (uri, elem) => elem.hash && elem.pathname === window.location.pathname
    ]
  });
  import_lazysizes.default.cfg.nativeLoading = {
    setLoadingAttribute: true,
    disableListeners: {
      scroll: true
    }
  };

  // ns-hugo:/home/ldale/Downloads/infosec club website/bcinfosec.club/node_modules/@thulite/doks-core/assets/js/clipboard.js
  var import_clipboard = __toESM(require_clipboard());
  (() => {
    "use strict";
    var cb = document.getElementsByClassName("highlight");
    for (var i3 = 0; i3 < cb.length; ++i3) {
      var element = cb[i3];
      element.insertAdjacentHTML("afterbegin", '<div class="copy"><button title="Copy to clipboard" class="btn-copy" aria-label="Clipboard button"><div></div></button></div>');
    }
    var clipboard = new import_clipboard.default(".btn-copy", {
      target: function(trigger) {
        return trigger.parentNode.nextElementSibling;
      }
    });
    clipboard.on("success", function(e2) {
      e2.clearSelection();
    });
    clipboard.on("error", function(e2) {
      console.error("Action:", e2.action);
      console.error("Trigger:", e2.trigger);
    });
  })();

  // ns-hugo:/home/ldale/Downloads/infosec club website/bcinfosec.club/node_modules/@thulite/doks-core/assets/js/to-top.js
  var topButton = document.getElementById("toTop");
  if (topButton !== null) {
    topButton.classList.remove("fade");
    window.onscroll = function() {
      scrollFunction();
    };
    topButton.addEventListener("click", topFunction);
  }
  function scrollFunction() {
    if (document.body.scrollTop > 270 || document.documentElement.scrollTop > 270) {
      topButton.classList.add("fade");
    } else {
      topButton.classList.remove("fade");
    }
  }
  function topFunction() {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
  }

  // ns-hugo:/home/ldale/Downloads/infosec club website/bcinfosec.club/node_modules/@thulite/doks-core/assets/js/tabs.js
  var i2;
  var allTabs = document.querySelectorAll("[data-toggle-tab]");
  var allPanes = document.querySelectorAll("[data-pane]");
  function toggleTabs(event) {
    if (event.target) {
      event.preventDefault();
      var clickedTab = event.currentTarget;
      var targetKey = clickedTab.getAttribute("data-toggle-tab");
    } else {
      var targetKey = event;
    }
    if (window.localStorage) {
      window.localStorage.setItem("configLangPref", targetKey);
    }
    var selectedTabs = document.querySelectorAll("[data-toggle-tab=" + targetKey + "]");
    var selectedPanes = document.querySelectorAll("[data-pane=" + targetKey + "]");
    for (var i3 = 0; i3 < allTabs.length; i3++) {
      allTabs[i3].classList.remove("active");
      allPanes[i3].classList.remove("active");
    }
    for (var i3 = 0; i3 < selectedTabs.length; i3++) {
      selectedTabs[i3].classList.add("active");
      selectedPanes[i3].classList.add("show", "active");
    }
  }
  for (i2 = 0; i2 < allTabs.length; i2++) {
    allTabs[i2].addEventListener("click", toggleTabs);
  }
  if (window.localStorage.getItem("configLangPref")) {
    toggleTabs(window.localStorage.getItem("configLangPref"));
  }

  // ns-hugo:/home/ldale/Downloads/infosec club website/bcinfosec.club/assets/js/custom.js
  var import_bootstrap_bundle_min = __toESM(require_bootstrap_bundle_min());
})();
/*! Bundled license information:

clipboard/dist/clipboard.js:
  (*!
   * clipboard.js v2.0.11
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   *)

bootstrap/dist/js/bootstrap.bundle.min.js:
  (*!
    * Bootstrap v5.3.3 (https://getbootstrap.com/)
    * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)

@thulite/doks-core/assets/js/clipboard.js:
  (*!
   * clipboard.js for Bootstrap based Thulite sites
   * Copyright 2021-2024 Thulite
   * Licensed under the MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,
